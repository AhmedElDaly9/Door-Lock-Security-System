
FinalProject_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  00002f1c  00002fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800148  00800148  00003098  2**0
                  ALLOC
  3 .stab         00002b20  00000000  00000000  00003098  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001124  00000000  00000000  00005bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a870  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b42b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e4       	ldi	r26, 0x48	; 72
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e1       	ldi	r26, 0x14	; 20
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 i;
uint8 j;


int main (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*LCD initialization*/
	LCD_init();
     b5a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <LCD_init>

	/*UART initialization*/
	UART_ConfigType UART_Config = {DISABLED,BIT1,BIT8,9600};
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	99 87       	std	Y+9, r25	; 0x09
     b64:	88 87       	std	Y+8, r24	; 0x08
     b66:	ed e1       	ldi	r30, 0x1D	; 29
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	fb 87       	std	Y+11, r31	; 0x0b
     b6c:	ea 87       	std	Y+10, r30	; 0x0a
     b6e:	f7 e0       	ldi	r31, 0x07	; 7
     b70:	fc 87       	std	Y+12, r31	; 0x0c
     b72:	ea 85       	ldd	r30, Y+10	; 0x0a
     b74:	fb 85       	ldd	r31, Y+11	; 0x0b
     b76:	00 80       	ld	r0, Z
     b78:	8a 85       	ldd	r24, Y+10	; 0x0a
     b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	9b 87       	std	Y+11, r25	; 0x0b
     b80:	8a 87       	std	Y+10, r24	; 0x0a
     b82:	e8 85       	ldd	r30, Y+8	; 0x08
     b84:	f9 85       	ldd	r31, Y+9	; 0x09
     b86:	00 82       	st	Z, r0
     b88:	88 85       	ldd	r24, Y+8	; 0x08
     b8a:	99 85       	ldd	r25, Y+9	; 0x09
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	99 87       	std	Y+9, r25	; 0x09
     b90:	88 87       	std	Y+8, r24	; 0x08
     b92:	9c 85       	ldd	r25, Y+12	; 0x0c
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	9c 87       	std	Y+12, r25	; 0x0c
     b98:	ec 85       	ldd	r30, Y+12	; 0x0c
     b9a:	ee 23       	and	r30, r30
     b9c:	51 f7       	brne	.-44     	; 0xb72 <main+0x2c>
	UART_init(&UART_Config);
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <UART_init>

	while(1)
	{
		UART_sendByte(MC1_Ready);
     ba6:	80 e1       	ldi	r24, 0x10	; 16
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>
		PassRec=UART_receiveByte();
     bae:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
     bb2:	80 93 56 01 	sts	0x0156, r24

		if (PassRec==0)
     bb6:	80 91 56 01 	lds	r24, 0x0156
     bba:	88 23       	and	r24, r24
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <main+0x7e>
		{
			EnterNewPassword();
     bbe:	0e 94 48 09 	call	0x1290	; 0x1290 <EnterNewPassword>
     bc2:	f1 cf       	rjmp	.-30     	; 0xba6 <main+0x60>
		}
		else if (PassRec==1)
     bc4:	80 91 56 01 	lds	r24, 0x0156
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	69 f7       	brne	.-38     	; 0xba6 <main+0x60>
		{
			display_options();
     bcc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <display_options>
     bd0:	ea cf       	rjmp	.-44     	; 0xba6 <main+0x60>

00000bd2 <display_options>:
		}
	}
}
void display_options (void)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	6c 97       	sbiw	r28, 0x1c	; 28
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     be6:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"*: Change pass");
     bea:	20 e6       	ldi	r18, 0x60	; 96
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	a9 01       	movw	r20, r18
     bf4:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>
	LCD_displayStringRowColumn(1,0,"#: Open door");
     c00:	2f e6       	ldi	r18, 0x6F	; 111
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	a9 01       	movw	r20, r18
     c0a:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>

	/*keyOption received the button pressed on the keypad*/
	keyOption = KeyPad_getPressedKey();
     c0e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
     c12:	80 93 48 01 	sts	0x0148, r24
     c16:	04 c0       	rjmp	.+8      	; 0xc20 <display_options+0x4e>

	/*while loop for ignoring any inputs other than the * and # */
	while (keyOption != '*' && keyOption != '#')
	{
		keyOption = KeyPad_getPressedKey();
     c18:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
     c1c:	80 93 48 01 	sts	0x0148, r24

	/*keyOption received the button pressed on the keypad*/
	keyOption = KeyPad_getPressedKey();

	/*while loop for ignoring any inputs other than the * and # */
	while (keyOption != '*' && keyOption != '#')
     c20:	80 91 48 01 	lds	r24, 0x0148
     c24:	8a 32       	cpi	r24, 0x2A	; 42
     c26:	21 f0       	breq	.+8      	; 0xc30 <display_options+0x5e>
     c28:	80 91 48 01 	lds	r24, 0x0148
     c2c:	83 32       	cpi	r24, 0x23	; 35
     c2e:	a1 f7       	brne	.-24     	; 0xc18 <display_options+0x46>
	{
		keyOption = KeyPad_getPressedKey();
	}

	if (keyOption=='*')
     c30:	80 91 48 01 	lds	r24, 0x0148
     c34:	8a 32       	cpi	r24, 0x2A	; 42
     c36:	09 f0       	breq	.+2      	; 0xc3a <display_options+0x68>
     c38:	80 c0       	rjmp	.+256    	; 0xd3a <display_options+0x168>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	aa ef       	ldi	r26, 0xFA	; 250
     c40:	b3 e4       	ldi	r27, 0x43	; 67
     c42:	89 8f       	std	Y+25, r24	; 0x19
     c44:	9a 8f       	std	Y+26, r25	; 0x1a
     c46:	ab 8f       	std	Y+27, r26	; 0x1b
     c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4a:	69 8d       	ldd	r22, Y+25	; 0x19
     c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	4a e7       	ldi	r20, 0x7A	; 122
     c58:	53 e4       	ldi	r21, 0x43	; 67
     c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	8d 8b       	std	Y+21, r24	; 0x15
     c64:	9e 8b       	std	Y+22, r25	; 0x16
     c66:	af 8b       	std	Y+23, r26	; 0x17
     c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6a:	6d 89       	ldd	r22, Y+21	; 0x15
     c6c:	7e 89       	ldd	r23, Y+22	; 0x16
     c6e:	8f 89       	ldd	r24, Y+23	; 0x17
     c70:	98 8d       	ldd	r25, Y+24	; 0x18
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e8       	ldi	r20, 0x80	; 128
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c7e:	88 23       	and	r24, r24
     c80:	2c f4       	brge	.+10     	; 0xc8c <display_options+0xba>
		__ticks = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	9c 8b       	std	Y+20, r25	; 0x14
     c88:	8b 8b       	std	Y+19, r24	; 0x13
     c8a:	3f c0       	rjmp	.+126    	; 0xd0a <display_options+0x138>
	else if (__tmp > 65535)
     c8c:	6d 89       	ldd	r22, Y+21	; 0x15
     c8e:	7e 89       	ldd	r23, Y+22	; 0x16
     c90:	8f 89       	ldd	r24, Y+23	; 0x17
     c92:	98 8d       	ldd	r25, Y+24	; 0x18
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	3f ef       	ldi	r19, 0xFF	; 255
     c98:	4f e7       	ldi	r20, 0x7F	; 127
     c9a:	57 e4       	ldi	r21, 0x47	; 71
     c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca0:	18 16       	cp	r1, r24
     ca2:	4c f5       	brge	.+82     	; 0xcf6 <display_options+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca4:	69 8d       	ldd	r22, Y+25	; 0x19
     ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e2       	ldi	r20, 0x20	; 32
     cb2:	51 e4       	ldi	r21, 0x41	; 65
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	9c 8b       	std	Y+20, r25	; 0x14
     cca:	8b 8b       	std	Y+19, r24	; 0x13
     ccc:	0f c0       	rjmp	.+30     	; 0xcec <display_options+0x11a>
     cce:	89 e1       	ldi	r24, 0x19	; 25
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	9a 8b       	std	Y+18, r25	; 0x12
     cd4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd6:	89 89       	ldd	r24, Y+17	; 0x11
     cd8:	9a 89       	ldd	r25, Y+18	; 0x12
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	f1 f7       	brne	.-4      	; 0xcda <display_options+0x108>
     cde:	9a 8b       	std	Y+18, r25	; 0x12
     ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	9c 89       	ldd	r25, Y+20	; 0x14
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	9c 8b       	std	Y+20, r25	; 0x14
     cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cec:	8b 89       	ldd	r24, Y+19	; 0x13
     cee:	9c 89       	ldd	r25, Y+20	; 0x14
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	69 f7       	brne	.-38     	; 0xcce <display_options+0xfc>
     cf4:	14 c0       	rjmp	.+40     	; 0xd1e <display_options+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf6:	6d 89       	ldd	r22, Y+21	; 0x15
     cf8:	7e 89       	ldd	r23, Y+22	; 0x16
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	9c 8b       	std	Y+20, r25	; 0x14
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	8b 89       	ldd	r24, Y+19	; 0x13
     d0c:	9c 89       	ldd	r25, Y+20	; 0x14
     d0e:	98 8b       	std	Y+16, r25	; 0x10
     d10:	8f 87       	std	Y+15, r24	; 0x0f
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	98 89       	ldd	r25, Y+16	; 0x10
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <display_options+0x144>
     d1a:	98 8b       	std	Y+16, r25	; 0x10
     d1c:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(500);

		while (UART_receiveByte() != MC2_Ready) {}
     d1e:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	d9 f7       	brne	.-10     	; 0xd1e <display_options+0x14c>
		UART_sendByte(keyOption);
     d28:	80 91 48 01 	lds	r24, 0x0148
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>

		ChangePassword();
     d34:	0e 94 2a 07 	call	0xe54	; 0xe54 <ChangePassword>
     d38:	84 c0       	rjmp	.+264    	; 0xe42 <display_options+0x270>
	}

	else if (keyOption=='#')
     d3a:	80 91 48 01 	lds	r24, 0x0148
     d3e:	83 32       	cpi	r24, 0x23	; 35
     d40:	09 f0       	breq	.+2      	; 0xd44 <display_options+0x172>
     d42:	7f c0       	rjmp	.+254    	; 0xe42 <display_options+0x270>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	aa ef       	ldi	r26, 0xFA	; 250
     d4a:	b3 e4       	ldi	r27, 0x43	; 67
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a e7       	ldi	r20, 0x7A	; 122
     d62:	53 e4       	ldi	r21, 0x43	; 67
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <display_options+0x1c4>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <display_options+0x242>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <display_options+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <display_options+0x224>
     dd8:	89 e1       	ldi	r24, 0x19	; 25
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <display_options+0x212>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <display_options+0x206>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <display_options+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <display_options+0x24e>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(500);

		while (UART_receiveByte() != MC2_Ready) {}
     e28:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	91 05       	cpc	r25, r1
     e30:	d9 f7       	brne	.-10     	; 0xe28 <display_options+0x256>
		UART_sendByte(keyOption);
     e32:	80 91 48 01 	lds	r24, 0x0148
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>

		CheckPassword();
     e3e:	0e 94 bd 0b 	call	0x177a	; 0x177a <CheckPassword>
	}
}
     e42:	6c 96       	adiw	r28, 0x1c	; 28
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <ChangePassword>:

void ChangePassword(void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	aa 97       	sbiw	r28, 0x2a	; 42
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
	flag=1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 1c 01 	sts	0x011C, r24
	LCD_clearScreen();
     e6e:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Current password:");
     e72:	2c e7       	ldi	r18, 0x7C	; 124
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	a9 01       	movw	r20, r18
     e7c:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>

	UART_sendByte(MC1_Ready);
     e88:	80 e1       	ldi	r24, 0x10	; 16
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>
	UART_receiveString(PassMC1);
     e90:	8f e4       	ldi	r24, 0x4F	; 79
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <UART_receiveString>
	PassMC1[5]='#';
     e98:	83 e2       	ldi	r24, 0x23	; 35
     e9a:	80 93 54 01 	sts	0x0154, r24

	i=0;
     e9e:	10 92 55 01 	sts	0x0155, r1
     ea2:	92 c0       	rjmp	.+292    	; 0xfc8 <ChangePassword+0x174>
	while (i<5)
	{
		 /* get the pressed key number */
		keyPressed = KeyPad_getPressedKey();
     ea4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
     ea8:	80 93 57 01 	sts	0x0157, r24
		if (PassMC1[i] != keyPressed + '0')
     eac:	80 91 55 01 	lds	r24, 0x0155
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	fc 01       	movw	r30, r24
     eb6:	e1 5b       	subi	r30, 0xB1	; 177
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	80 81       	ld	r24, Z
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	80 91 57 01 	lds	r24, 0x0157
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	c0 96       	adiw	r24, 0x30	; 48
     eca:	28 17       	cp	r18, r24
     ecc:	39 07       	cpc	r19, r25
     ece:	11 f0       	breq	.+4      	; 0xed4 <ChangePassword+0x80>
		{
			flag=0;
     ed0:	10 92 1c 01 	sts	0x011C, r1
		}
		LCD_displayCharacter('*');
     ed4:	8a e2       	ldi	r24, 0x2A	; 42
     ed6:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	aa ef       	ldi	r26, 0xFA	; 250
     ee0:	b3 e4       	ldi	r27, 0x43	; 67
     ee2:	8f a3       	std	Y+39, r24	; 0x27
     ee4:	98 a7       	std	Y+40, r25	; 0x28
     ee6:	a9 a7       	std	Y+41, r26	; 0x29
     ee8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eea:	6f a1       	ldd	r22, Y+39	; 0x27
     eec:	78 a5       	ldd	r23, Y+40	; 0x28
     eee:	89 a5       	ldd	r24, Y+41	; 0x29
     ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	4a e7       	ldi	r20, 0x7A	; 122
     ef8:	53 e4       	ldi	r21, 0x43	; 67
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	8b a3       	std	Y+35, r24	; 0x23
     f04:	9c a3       	std	Y+36, r25	; 0x24
     f06:	ad a3       	std	Y+37, r26	; 0x25
     f08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f0a:	6b a1       	ldd	r22, Y+35	; 0x23
     f0c:	7c a1       	ldd	r23, Y+36	; 0x24
     f0e:	8d a1       	ldd	r24, Y+37	; 0x25
     f10:	9e a1       	ldd	r25, Y+38	; 0x26
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e8       	ldi	r20, 0x80	; 128
     f18:	5f e3       	ldi	r21, 0x3F	; 63
     f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1e:	88 23       	and	r24, r24
     f20:	2c f4       	brge	.+10     	; 0xf2c <ChangePassword+0xd8>
		__ticks = 1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	9a a3       	std	Y+34, r25	; 0x22
     f28:	89 a3       	std	Y+33, r24	; 0x21
     f2a:	3f c0       	rjmp	.+126    	; 0xfaa <ChangePassword+0x156>
	else if (__tmp > 65535)
     f2c:	6b a1       	ldd	r22, Y+35	; 0x23
     f2e:	7c a1       	ldd	r23, Y+36	; 0x24
     f30:	8d a1       	ldd	r24, Y+37	; 0x25
     f32:	9e a1       	ldd	r25, Y+38	; 0x26
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	4f e7       	ldi	r20, 0x7F	; 127
     f3a:	57 e4       	ldi	r21, 0x47	; 71
     f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f40:	18 16       	cp	r1, r24
     f42:	4c f5       	brge	.+82     	; 0xf96 <ChangePassword+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f44:	6f a1       	ldd	r22, Y+39	; 0x27
     f46:	78 a5       	ldd	r23, Y+40	; 0x28
     f48:	89 a5       	ldd	r24, Y+41	; 0x29
     f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e2       	ldi	r20, 0x20	; 32
     f52:	51 e4       	ldi	r21, 0x41	; 65
     f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <ChangePassword+0x138>
     f6e:	89 e1       	ldi	r24, 0x19	; 25
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	98 a3       	std	Y+32, r25	; 0x20
     f74:	8f 8f       	std	Y+31, r24	; 0x1f
     f76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f78:	98 a1       	ldd	r25, Y+32	; 0x20
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <ChangePassword+0x126>
     f7e:	98 a3       	std	Y+32, r25	; 0x20
     f80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f82:	89 a1       	ldd	r24, Y+33	; 0x21
     f84:	9a a1       	ldd	r25, Y+34	; 0x22
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	9a a3       	std	Y+34, r25	; 0x22
     f8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	9a a1       	ldd	r25, Y+34	; 0x22
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	69 f7       	brne	.-38     	; 0xf6e <ChangePassword+0x11a>
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <ChangePassword+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f96:	6b a1       	ldd	r22, Y+35	; 0x23
     f98:	7c a1       	ldd	r23, Y+36	; 0x24
     f9a:	8d a1       	ldd	r24, Y+37	; 0x25
     f9c:	9e a1       	ldd	r25, Y+38	; 0x26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9a a3       	std	Y+34, r25	; 0x22
     fa8:	89 a3       	std	Y+33, r24	; 0x21
     faa:	89 a1       	ldd	r24, Y+33	; 0x21
     fac:	9a a1       	ldd	r25, Y+34	; 0x22
     fae:	9e 8f       	std	Y+30, r25	; 0x1e
     fb0:	8d 8f       	std	Y+29, r24	; 0x1d
     fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <ChangePassword+0x162>
     fba:	9e 8f       	std	Y+30, r25	; 0x1e
     fbc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500); /* Press time */
		i++;
     fbe:	80 91 55 01 	lds	r24, 0x0155
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	80 93 55 01 	sts	0x0155, r24
	UART_sendByte(MC1_Ready);
	UART_receiveString(PassMC1);
	PassMC1[5]='#';

	i=0;
	while (i<5)
     fc8:	80 91 55 01 	lds	r24, 0x0155
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <ChangePassword+0x17e>
     fd0:	69 cf       	rjmp	.-302    	; 0xea4 <ChangePassword+0x50>
		LCD_displayCharacter('*');
		_delay_ms(500); /* Press time */
		i++;
	}

	if (flag==1)
     fd2:	80 91 1c 01 	lds	r24, 0x011C
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	61 f4       	brne	.+24     	; 0xff2 <ChangePassword+0x19e>
	{
		while (UART_receiveByte() != MC2_Ready) {}
     fda:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	91 05       	cpc	r25, r1
     fe2:	d9 f7       	brne	.-10     	; 0xfda <ChangePassword+0x186>
		UART_sendByte(OK);
     fe4:	8a ea       	ldi	r24, 0xAA	; 170
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>

		EnterNewPassword();
     fec:	0e 94 48 09 	call	0x1290	; 0x1290 <EnterNewPassword>
     ff0:	46 c1       	rjmp	.+652    	; 0x127e <ChangePassword+0x42a>
	}

	else if (flag==0)
     ff2:	80 91 1c 01 	lds	r24, 0x011C
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <ChangePassword+0x1a8>
     ffa:	41 c1       	rjmp	.+642    	; 0x127e <ChangePassword+0x42a>
	{
		j=0;
     ffc:	10 92 4e 01 	sts	0x014E, r1
		do {
			flag=1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 1c 01 	sts	0x011C, r24
			LCD_clearScreen();
    1006:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    100a:	8e e8       	ldi	r24, 0x8E	; 142
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	aa ef       	ldi	r26, 0xFA	; 250
    1018:	b3 e4       	ldi	r27, 0x43	; 67
    101a:	89 8f       	std	Y+25, r24	; 0x19
    101c:	9a 8f       	std	Y+26, r25	; 0x1a
    101e:	ab 8f       	std	Y+27, r26	; 0x1b
    1020:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1022:	69 8d       	ldd	r22, Y+25	; 0x19
    1024:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a e7       	ldi	r20, 0x7A	; 122
    1030:	53 e4       	ldi	r21, 0x43	; 67
    1032:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	8d 8b       	std	Y+21, r24	; 0x15
    103c:	9e 8b       	std	Y+22, r25	; 0x16
    103e:	af 8b       	std	Y+23, r26	; 0x17
    1040:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1042:	6d 89       	ldd	r22, Y+21	; 0x15
    1044:	7e 89       	ldd	r23, Y+22	; 0x16
    1046:	8f 89       	ldd	r24, Y+23	; 0x17
    1048:	98 8d       	ldd	r25, Y+24	; 0x18
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e8       	ldi	r20, 0x80	; 128
    1050:	5f e3       	ldi	r21, 0x3F	; 63
    1052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1056:	88 23       	and	r24, r24
    1058:	2c f4       	brge	.+10     	; 0x1064 <ChangePassword+0x210>
		__ticks = 1;
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	3f c0       	rjmp	.+126    	; 0x10e2 <ChangePassword+0x28e>
	else if (__tmp > 65535)
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	3f ef       	ldi	r19, 0xFF	; 255
    1070:	4f e7       	ldi	r20, 0x7F	; 127
    1072:	57 e4       	ldi	r21, 0x47	; 71
    1074:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1078:	18 16       	cp	r1, r24
    107a:	4c f5       	brge	.+82     	; 0x10ce <ChangePassword+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107c:	69 8d       	ldd	r22, Y+25	; 0x19
    107e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	bc 01       	movw	r22, r24
    1096:	cd 01       	movw	r24, r26
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	9c 8b       	std	Y+20, r25	; 0x14
    10a2:	8b 8b       	std	Y+19, r24	; 0x13
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <ChangePassword+0x270>
    10a6:	89 e1       	ldi	r24, 0x19	; 25
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	9a 8b       	std	Y+18, r25	; 0x12
    10ac:	89 8b       	std	Y+17, r24	; 0x11
    10ae:	89 89       	ldd	r24, Y+17	; 0x11
    10b0:	9a 89       	ldd	r25, Y+18	; 0x12
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <ChangePassword+0x25e>
    10b6:	9a 8b       	std	Y+18, r25	; 0x12
    10b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9c 8b       	std	Y+20, r25	; 0x14
    10c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c4:	8b 89       	ldd	r24, Y+19	; 0x13
    10c6:	9c 89       	ldd	r25, Y+20	; 0x14
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	69 f7       	brne	.-38     	; 0x10a6 <ChangePassword+0x252>
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <ChangePassword+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ce:	6d 89       	ldd	r22, Y+21	; 0x15
    10d0:	7e 89       	ldd	r23, Y+22	; 0x16
    10d2:	8f 89       	ldd	r24, Y+23	; 0x17
    10d4:	98 8d       	ldd	r25, Y+24	; 0x18
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9c 8b       	std	Y+20, r25	; 0x14
    10e0:	8b 8b       	std	Y+19, r24	; 0x13
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	98 8b       	std	Y+16, r25	; 0x10
    10e8:	8f 87       	std	Y+15, r24	; 0x0f
    10ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ec:	98 89       	ldd	r25, Y+16	; 0x10
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <ChangePassword+0x29a>
    10f2:	98 8b       	std	Y+16, r25	; 0x10
    10f4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_clearScreen();
    10f6:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
			LCD_displayString("Current Password:");
    10fa:	8d e9       	ldi	r24, 0x9D	; 157
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>

			i=0;
    110a:	10 92 55 01 	sts	0x0155, r1
    110e:	92 c0       	rjmp	.+292    	; 0x1234 <ChangePassword+0x3e0>
			while (i<5)
			{
				keyPressed = KeyPad_getPressedKey(); /* get the pressed key number */
    1110:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
    1114:	80 93 57 01 	sts	0x0157, r24
				if (PassMC1[i] != keyPressed+'0')
    1118:	80 91 55 01 	lds	r24, 0x0155
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	e1 5b       	subi	r30, 0xB1	; 177
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	80 91 57 01 	lds	r24, 0x0157
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	c0 96       	adiw	r24, 0x30	; 48
    1136:	28 17       	cp	r18, r24
    1138:	39 07       	cpc	r19, r25
    113a:	11 f0       	breq	.+4      	; 0x1140 <ChangePassword+0x2ec>
				{
					flag=0;
    113c:	10 92 1c 01 	sts	0x011C, r1
				}
				LCD_displayCharacter('*');
    1140:	8a e2       	ldi	r24, 0x2A	; 42
    1142:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	aa ef       	ldi	r26, 0xFA	; 250
    114c:	b3 e4       	ldi	r27, 0x43	; 67
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	9c 87       	std	Y+12, r25	; 0x0c
    1152:	ad 87       	std	Y+13, r26	; 0x0d
    1154:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	6b 85       	ldd	r22, Y+11	; 0x0b
    1158:	7c 85       	ldd	r23, Y+12	; 0x0c
    115a:	8d 85       	ldd	r24, Y+13	; 0x0d
    115c:	9e 85       	ldd	r25, Y+14	; 0x0e
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4a e7       	ldi	r20, 0x7A	; 122
    1164:	53 e4       	ldi	r21, 0x43	; 67
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8f 83       	std	Y+7, r24	; 0x07
    1170:	98 87       	std	Y+8, r25	; 0x08
    1172:	a9 87       	std	Y+9, r26	; 0x09
    1174:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1176:	6f 81       	ldd	r22, Y+7	; 0x07
    1178:	78 85       	ldd	r23, Y+8	; 0x08
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	9a 85       	ldd	r25, Y+10	; 0x0a
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5f e3       	ldi	r21, 0x3F	; 63
    1186:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <ChangePassword+0x344>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <ChangePassword+0x3c2>
	else if (__tmp > 65535)
    1198:	6f 81       	ldd	r22, Y+7	; 0x07
    119a:	78 85       	ldd	r23, Y+8	; 0x08
    119c:	89 85       	ldd	r24, Y+9	; 0x09
    119e:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <ChangePassword+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <ChangePassword+0x3a4>
    11da:	89 e1       	ldi	r24, 0x19	; 25
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <ChangePassword+0x392>
    11ea:	9c 83       	std	Y+4, r25	; 0x04
    11ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f7       	brne	.-38     	; 0x11da <ChangePassword+0x386>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <ChangePassword+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6f 81       	ldd	r22, Y+7	; 0x07
    1204:	78 85       	ldd	r23, Y+8	; 0x08
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	9a 85       	ldd	r25, Y+10	; 0x0a
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	8d 81       	ldd	r24, Y+5	; 0x05
    1218:	9e 81       	ldd	r25, Y+6	; 0x06
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <ChangePassword+0x3ce>
    1226:	9a 83       	std	Y+2, r25	; 0x02
    1228:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500); /* Press time */
				i++;
    122a:	80 91 55 01 	lds	r24, 0x0155
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 55 01 	sts	0x0155, r24
			LCD_clearScreen();
			LCD_displayString("Current Password:");
			LCD_goToRowColumn(1,0);

			i=0;
			while (i<5)
    1234:	80 91 55 01 	lds	r24, 0x0155
    1238:	85 30       	cpi	r24, 0x05	; 5
    123a:	08 f4       	brcc	.+2      	; 0x123e <ChangePassword+0x3ea>
    123c:	69 cf       	rjmp	.-302    	; 0x1110 <ChangePassword+0x2bc>
				}
				LCD_displayCharacter('*');
				_delay_ms(500); /* Press time */
				i++;
			}
			j++;
    123e:	80 91 4e 01 	lds	r24, 0x014E
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 4e 01 	sts	0x014E, r24
		}while (j<2 && flag==0);
    1248:	80 91 4e 01 	lds	r24, 0x014E
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	28 f4       	brcc	.+10     	; 0x125a <ChangePassword+0x406>
    1250:	80 91 1c 01 	lds	r24, 0x011C
    1254:	88 23       	and	r24, r24
    1256:	09 f4       	brne	.+2      	; 0x125a <ChangePassword+0x406>
    1258:	d3 ce       	rjmp	.-602    	; 0x1000 <ChangePassword+0x1ac>

		/*If the user enters 3 consecutive wrong passwords the buzzer rings*/
		if (flag==0)
    125a:	80 91 1c 01 	lds	r24, 0x011C
    125e:	88 23       	and	r24, r24
    1260:	19 f4       	brne	.+6      	; 0x1268 <ChangePassword+0x414>
		{
			BuzzerMC1();
    1262:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <BuzzerMC1>
    1266:	0b c0       	rjmp	.+22     	; 0x127e <ChangePassword+0x42a>
		}
		else
		{
			while (UART_receiveByte() != MC2_Ready) {}
    1268:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	d9 f7       	brne	.-10     	; 0x1268 <ChangePassword+0x414>
			UART_sendByte(OK);
    1272:	8a ea       	ldi	r24, 0xAA	; 170
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>

			EnterNewPassword();
    127a:	0e 94 48 09 	call	0x1290	; 0x1290 <EnterNewPassword>
		}
	}
}
    127e:	aa 96       	adiw	r28, 0x2a	; 42
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <EnterNewPassword>:

void EnterNewPassword(void)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	ea 97       	sbiw	r28, 0x3a	; 58
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
	while (1)
	{
		flag=1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 1c 01 	sts	0x011C, r24
		LCD_clearScreen();
    12aa:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter new pass:");
    12ae:	2f ea       	ldi	r18, 0xAF	; 175
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>

		i=0;
    12c4:	10 92 55 01 	sts	0x0155, r1
    12c8:	90 c0       	rjmp	.+288    	; 0x13ea <EnterNewPassword+0x15a>
		while (i<5)
		{
			 /* get the pressed key number */
			keyPressed = KeyPad_getPressedKey();
    12ca:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
    12ce:	80 93 57 01 	sts	0x0157, r24
			if (keyPressed >= 0 && keyPressed <=9)
    12d2:	80 91 57 01 	lds	r24, 0x0157
    12d6:	80 91 57 01 	lds	r24, 0x0157
    12da:	8a 30       	cpi	r24, 0x0A	; 10
    12dc:	08 f0       	brcs	.+2      	; 0x12e0 <EnterNewPassword+0x50>
    12de:	85 c0       	rjmp	.+266    	; 0x13ea <EnterNewPassword+0x15a>
			{
				PassMC1[i]= keyPressed + '0';
    12e0:	80 91 55 01 	lds	r24, 0x0155
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	80 91 57 01 	lds	r24, 0x0157
    12ec:	80 5d       	subi	r24, 0xD0	; 208
    12ee:	f9 01       	movw	r30, r18
    12f0:	e1 5b       	subi	r30, 0xB1	; 177
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    12f6:	8a e2       	ldi	r24, 0x2A	; 42
    12f8:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	aa ef       	ldi	r26, 0xFA	; 250
    1302:	b3 e4       	ldi	r27, 0x43	; 67
    1304:	8d ab       	std	Y+53, r24	; 0x35
    1306:	9e ab       	std	Y+54, r25	; 0x36
    1308:	af ab       	std	Y+55, r26	; 0x37
    130a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130c:	6d a9       	ldd	r22, Y+53	; 0x35
    130e:	7e a9       	ldd	r23, Y+54	; 0x36
    1310:	8f a9       	ldd	r24, Y+55	; 0x37
    1312:	98 ad       	ldd	r25, Y+56	; 0x38
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	4a e7       	ldi	r20, 0x7A	; 122
    131a:	53 e4       	ldi	r21, 0x43	; 67
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	89 ab       	std	Y+49, r24	; 0x31
    1326:	9a ab       	std	Y+50, r25	; 0x32
    1328:	ab ab       	std	Y+51, r26	; 0x33
    132a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    132c:	69 a9       	ldd	r22, Y+49	; 0x31
    132e:	7a a9       	ldd	r23, Y+50	; 0x32
    1330:	8b a9       	ldd	r24, Y+51	; 0x33
    1332:	9c a9       	ldd	r25, Y+52	; 0x34
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1340:	88 23       	and	r24, r24
    1342:	2c f4       	brge	.+10     	; 0x134e <EnterNewPassword+0xbe>
		__ticks = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	98 ab       	std	Y+48, r25	; 0x30
    134a:	8f a7       	std	Y+47, r24	; 0x2f
    134c:	3f c0       	rjmp	.+126    	; 0x13cc <EnterNewPassword+0x13c>
	else if (__tmp > 65535)
    134e:	69 a9       	ldd	r22, Y+49	; 0x31
    1350:	7a a9       	ldd	r23, Y+50	; 0x32
    1352:	8b a9       	ldd	r24, Y+51	; 0x33
    1354:	9c a9       	ldd	r25, Y+52	; 0x34
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	4f e7       	ldi	r20, 0x7F	; 127
    135c:	57 e4       	ldi	r21, 0x47	; 71
    135e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1362:	18 16       	cp	r1, r24
    1364:	4c f5       	brge	.+82     	; 0x13b8 <EnterNewPassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1366:	6d a9       	ldd	r22, Y+53	; 0x35
    1368:	7e a9       	ldd	r23, Y+54	; 0x36
    136a:	8f a9       	ldd	r24, Y+55	; 0x37
    136c:	98 ad       	ldd	r25, Y+56	; 0x38
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	98 ab       	std	Y+48, r25	; 0x30
    138c:	8f a7       	std	Y+47, r24	; 0x2f
    138e:	0f c0       	rjmp	.+30     	; 0x13ae <EnterNewPassword+0x11e>
    1390:	89 e1       	ldi	r24, 0x19	; 25
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9e a7       	std	Y+46, r25	; 0x2e
    1396:	8d a7       	std	Y+45, r24	; 0x2d
    1398:	8d a5       	ldd	r24, Y+45	; 0x2d
    139a:	9e a5       	ldd	r25, Y+46	; 0x2e
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <EnterNewPassword+0x10c>
    13a0:	9e a7       	std	Y+46, r25	; 0x2e
    13a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13a6:	98 a9       	ldd	r25, Y+48	; 0x30
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	98 ab       	std	Y+48, r25	; 0x30
    13ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b0:	98 a9       	ldd	r25, Y+48	; 0x30
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	69 f7       	brne	.-38     	; 0x1390 <EnterNewPassword+0x100>
    13b6:	14 c0       	rjmp	.+40     	; 0x13e0 <EnterNewPassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ba:	7a a9       	ldd	r23, Y+50	; 0x32
    13bc:	8b a9       	ldd	r24, Y+51	; 0x33
    13be:	9c a9       	ldd	r25, Y+52	; 0x34
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	98 ab       	std	Y+48, r25	; 0x30
    13ca:	8f a7       	std	Y+47, r24	; 0x2f
    13cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ce:	98 a9       	ldd	r25, Y+48	; 0x30
    13d0:	9c a7       	std	Y+44, r25	; 0x2c
    13d2:	8b a7       	std	Y+43, r24	; 0x2b
    13d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <EnterNewPassword+0x148>
    13dc:	9c a7       	std	Y+44, r25	; 0x2c
    13de:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500); /* Press time */
				i++;
    13e0:	80 91 55 01 	lds	r24, 0x0155
    13e4:	8f 5f       	subi	r24, 0xFF	; 255
    13e6:	80 93 55 01 	sts	0x0155, r24
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Enter new pass:");
		LCD_goToRowColumn(1,0);

		i=0;
		while (i<5)
    13ea:	80 91 55 01 	lds	r24, 0x0155
    13ee:	85 30       	cpi	r24, 0x05	; 5
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <EnterNewPassword+0x164>
    13f2:	6b cf       	rjmp	.-298    	; 0x12ca <EnterNewPassword+0x3a>
				_delay_ms(500); /* Press time */
				i++;
			}
		}

		LCD_clearScreen();
    13f4:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Re-enter pass:");
    13f8:	2f eb       	ldi	r18, 0xBF	; 191
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	a9 01       	movw	r20, r18
    1402:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
		LCD_goToRowColumn(1,0);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>

		i=0;
    140e:	10 92 55 01 	sts	0x0155, r1
    1412:	99 c0       	rjmp	.+306    	; 0x1546 <EnterNewPassword+0x2b6>
		while (i<5)
		{
			keyPressed = KeyPad_getPressedKey(); /* get the pressed key number */
    1414:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
    1418:	80 93 57 01 	sts	0x0157, r24

			if (keyPressed >= 0 && keyPressed <=9)
    141c:	80 91 57 01 	lds	r24, 0x0157
    1420:	80 91 57 01 	lds	r24, 0x0157
    1424:	8a 30       	cpi	r24, 0x0A	; 10
    1426:	08 f0       	brcs	.+2      	; 0x142a <EnterNewPassword+0x19a>
    1428:	8e c0       	rjmp	.+284    	; 0x1546 <EnterNewPassword+0x2b6>
			{
				if (PassMC1[i] != (keyPressed+'0'))
    142a:	80 91 55 01 	lds	r24, 0x0155
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	fc 01       	movw	r30, r24
    1434:	e1 5b       	subi	r30, 0xB1	; 177
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	80 91 57 01 	lds	r24, 0x0157
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	c0 96       	adiw	r24, 0x30	; 48
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
    144c:	11 f0       	breq	.+4      	; 0x1452 <EnterNewPassword+0x1c2>
				{
					flag=0;
    144e:	10 92 1c 01 	sts	0x011C, r1
				}
				LCD_displayCharacter('*');
    1452:	8a e2       	ldi	r24, 0x2A	; 42
    1454:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	aa ef       	ldi	r26, 0xFA	; 250
    145e:	b3 e4       	ldi	r27, 0x43	; 67
    1460:	8f a3       	std	Y+39, r24	; 0x27
    1462:	98 a7       	std	Y+40, r25	; 0x28
    1464:	a9 a7       	std	Y+41, r26	; 0x29
    1466:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	6f a1       	ldd	r22, Y+39	; 0x27
    146a:	78 a5       	ldd	r23, Y+40	; 0x28
    146c:	89 a5       	ldd	r24, Y+41	; 0x29
    146e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	4a e7       	ldi	r20, 0x7A	; 122
    1476:	53 e4       	ldi	r21, 0x43	; 67
    1478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	8b a3       	std	Y+35, r24	; 0x23
    1482:	9c a3       	std	Y+36, r25	; 0x24
    1484:	ad a3       	std	Y+37, r26	; 0x25
    1486:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1488:	6b a1       	ldd	r22, Y+35	; 0x23
    148a:	7c a1       	ldd	r23, Y+36	; 0x24
    148c:	8d a1       	ldd	r24, Y+37	; 0x25
    148e:	9e a1       	ldd	r25, Y+38	; 0x26
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	40 e8       	ldi	r20, 0x80	; 128
    1496:	5f e3       	ldi	r21, 0x3F	; 63
    1498:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    149c:	88 23       	and	r24, r24
    149e:	2c f4       	brge	.+10     	; 0x14aa <EnterNewPassword+0x21a>
		__ticks = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9a a3       	std	Y+34, r25	; 0x22
    14a6:	89 a3       	std	Y+33, r24	; 0x21
    14a8:	3f c0       	rjmp	.+126    	; 0x1528 <EnterNewPassword+0x298>
	else if (__tmp > 65535)
    14aa:	6b a1       	ldd	r22, Y+35	; 0x23
    14ac:	7c a1       	ldd	r23, Y+36	; 0x24
    14ae:	8d a1       	ldd	r24, Y+37	; 0x25
    14b0:	9e a1       	ldd	r25, Y+38	; 0x26
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	3f ef       	ldi	r19, 0xFF	; 255
    14b6:	4f e7       	ldi	r20, 0x7F	; 127
    14b8:	57 e4       	ldi	r21, 0x47	; 71
    14ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14be:	18 16       	cp	r1, r24
    14c0:	4c f5       	brge	.+82     	; 0x1514 <EnterNewPassword+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c2:	6f a1       	ldd	r22, Y+39	; 0x27
    14c4:	78 a5       	ldd	r23, Y+40	; 0x28
    14c6:	89 a5       	ldd	r24, Y+41	; 0x29
    14c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	bc 01       	movw	r22, r24
    14dc:	cd 01       	movw	r24, r26
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9a a3       	std	Y+34, r25	; 0x22
    14e8:	89 a3       	std	Y+33, r24	; 0x21
    14ea:	0f c0       	rjmp	.+30     	; 0x150a <EnterNewPassword+0x27a>
    14ec:	89 e1       	ldi	r24, 0x19	; 25
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	98 a3       	std	Y+32, r25	; 0x20
    14f2:	8f 8f       	std	Y+31, r24	; 0x1f
    14f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14f6:	98 a1       	ldd	r25, Y+32	; 0x20
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <EnterNewPassword+0x268>
    14fc:	98 a3       	std	Y+32, r25	; 0x20
    14fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1500:	89 a1       	ldd	r24, Y+33	; 0x21
    1502:	9a a1       	ldd	r25, Y+34	; 0x22
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9a a3       	std	Y+34, r25	; 0x22
    1508:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	89 a1       	ldd	r24, Y+33	; 0x21
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	69 f7       	brne	.-38     	; 0x14ec <EnterNewPassword+0x25c>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <EnterNewPassword+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	6b a1       	ldd	r22, Y+35	; 0x23
    1516:	7c a1       	ldd	r23, Y+36	; 0x24
    1518:	8d a1       	ldd	r24, Y+37	; 0x25
    151a:	9e a1       	ldd	r25, Y+38	; 0x26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9a a3       	std	Y+34, r25	; 0x22
    1526:	89 a3       	std	Y+33, r24	; 0x21
    1528:	89 a1       	ldd	r24, Y+33	; 0x21
    152a:	9a a1       	ldd	r25, Y+34	; 0x22
    152c:	9e 8f       	std	Y+30, r25	; 0x1e
    152e:	8d 8f       	std	Y+29, r24	; 0x1d
    1530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <EnterNewPassword+0x2a4>
    1538:	9e 8f       	std	Y+30, r25	; 0x1e
    153a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500); /* Press time */
				i++;
    153c:	80 91 55 01 	lds	r24, 0x0155
    1540:	8f 5f       	subi	r24, 0xFF	; 255
    1542:	80 93 55 01 	sts	0x0155, r24
		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"Re-enter pass:");
		LCD_goToRowColumn(1,0);

		i=0;
		while (i<5)
    1546:	80 91 55 01 	lds	r24, 0x0155
    154a:	85 30       	cpi	r24, 0x05	; 5
    154c:	08 f4       	brcc	.+2      	; 0x1550 <EnterNewPassword+0x2c0>
    154e:	62 cf       	rjmp	.-316    	; 0x1414 <EnterNewPassword+0x184>
				i++;
			}
		}


		if (flag == 1)
    1550:	80 91 1c 01 	lds	r24, 0x011C
    1554:	81 30       	cpi	r24, 0x01	; 1
    1556:	09 f0       	breq	.+2      	; 0x155a <EnterNewPassword+0x2ca>
    1558:	8b c0       	rjmp	.+278    	; 0x1670 <EnterNewPassword+0x3e0>
		{
			/*Adding the last string character # for UART receiving and sending*/
			PassMC1[5]= '#';
    155a:	83 e2       	ldi	r24, 0x23	; 35
    155c:	80 93 54 01 	sts	0x0154, r24

			while(UART_receiveByte() != MC2_Ready){}
    1560:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	91 05       	cpc	r25, r1
    1568:	d9 f7       	brne	.-10     	; 0x1560 <EnterNewPassword+0x2d0>
			UART_sendString(PassMC1);
    156a:	8f e4       	ldi	r24, 0x4F	; 79
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <UART_sendString>

			PassRec=1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 56 01 	sts	0x0156, r24

			LCD_clearScreen();
    1578:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Pass Recorded");
    157c:	2e ec       	ldi	r18, 0xCE	; 206
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	a9 01       	movw	r20, r18
    1586:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	aa e7       	ldi	r26, 0x7A	; 122
    1590:	b4 e4       	ldi	r27, 0x44	; 68
    1592:	89 8f       	std	Y+25, r24	; 0x19
    1594:	9a 8f       	std	Y+26, r25	; 0x1a
    1596:	ab 8f       	std	Y+27, r26	; 0x1b
    1598:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    159a:	69 8d       	ldd	r22, Y+25	; 0x19
    159c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a e7       	ldi	r20, 0x7A	; 122
    15a8:	53 e4       	ldi	r21, 0x43	; 67
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	8d 8b       	std	Y+21, r24	; 0x15
    15b4:	9e 8b       	std	Y+22, r25	; 0x16
    15b6:	af 8b       	std	Y+23, r26	; 0x17
    15b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ba:	6d 89       	ldd	r22, Y+21	; 0x15
    15bc:	7e 89       	ldd	r23, Y+22	; 0x16
    15be:	8f 89       	ldd	r24, Y+23	; 0x17
    15c0:	98 8d       	ldd	r25, Y+24	; 0x18
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	2c f4       	brge	.+10     	; 0x15dc <EnterNewPassword+0x34c>
		__ticks = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9c 8b       	std	Y+20, r25	; 0x14
    15d8:	8b 8b       	std	Y+19, r24	; 0x13
    15da:	3f c0       	rjmp	.+126    	; 0x165a <EnterNewPassword+0x3ca>
	else if (__tmp > 65535)
    15dc:	6d 89       	ldd	r22, Y+21	; 0x15
    15de:	7e 89       	ldd	r23, Y+22	; 0x16
    15e0:	8f 89       	ldd	r24, Y+23	; 0x17
    15e2:	98 8d       	ldd	r25, Y+24	; 0x18
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	3f ef       	ldi	r19, 0xFF	; 255
    15e8:	4f e7       	ldi	r20, 0x7F	; 127
    15ea:	57 e4       	ldi	r21, 0x47	; 71
    15ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f0:	18 16       	cp	r1, r24
    15f2:	4c f5       	brge	.+82     	; 0x1646 <EnterNewPassword+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f4:	69 8d       	ldd	r22, Y+25	; 0x19
    15f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e2       	ldi	r20, 0x20	; 32
    1602:	51 e4       	ldi	r21, 0x41	; 65
    1604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9c 8b       	std	Y+20, r25	; 0x14
    161a:	8b 8b       	std	Y+19, r24	; 0x13
    161c:	0f c0       	rjmp	.+30     	; 0x163c <EnterNewPassword+0x3ac>
    161e:	89 e1       	ldi	r24, 0x19	; 25
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	9a 8b       	std	Y+18, r25	; 0x12
    1624:	89 8b       	std	Y+17, r24	; 0x11
    1626:	89 89       	ldd	r24, Y+17	; 0x11
    1628:	9a 89       	ldd	r25, Y+18	; 0x12
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <EnterNewPassword+0x39a>
    162e:	9a 8b       	std	Y+18, r25	; 0x12
    1630:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1632:	8b 89       	ldd	r24, Y+19	; 0x13
    1634:	9c 89       	ldd	r25, Y+20	; 0x14
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	9c 8b       	std	Y+20, r25	; 0x14
    163a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163c:	8b 89       	ldd	r24, Y+19	; 0x13
    163e:	9c 89       	ldd	r25, Y+20	; 0x14
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f7       	brne	.-38     	; 0x161e <EnterNewPassword+0x38e>
    1644:	91 c0       	rjmp	.+290    	; 0x1768 <EnterNewPassword+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1646:	6d 89       	ldd	r22, Y+21	; 0x15
    1648:	7e 89       	ldd	r23, Y+22	; 0x16
    164a:	8f 89       	ldd	r24, Y+23	; 0x17
    164c:	98 8d       	ldd	r25, Y+24	; 0x18
    164e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9c 8b       	std	Y+20, r25	; 0x14
    1658:	8b 8b       	std	Y+19, r24	; 0x13
    165a:	8b 89       	ldd	r24, Y+19	; 0x13
    165c:	9c 89       	ldd	r25, Y+20	; 0x14
    165e:	98 8b       	std	Y+16, r25	; 0x10
    1660:	8f 87       	std	Y+15, r24	; 0x0f
    1662:	8f 85       	ldd	r24, Y+15	; 0x0f
    1664:	98 89       	ldd	r25, Y+16	; 0x10
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	f1 f7       	brne	.-4      	; 0x1666 <EnterNewPassword+0x3d6>
    166a:	98 8b       	std	Y+16, r25	; 0x10
    166c:	8f 87       	std	Y+15, r24	; 0x0f
    166e:	7c c0       	rjmp	.+248    	; 0x1768 <EnterNewPassword+0x4d8>
			_delay_ms(1000);
			break;
		}
		else
		{
			LCD_clearScreen();
    1670:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Not matched");
    1674:	2c ed       	ldi	r18, 0xDC	; 220
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	aa e7       	ldi	r26, 0x7A	; 122
    1688:	b4 e4       	ldi	r27, 0x44	; 68
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	ad 87       	std	Y+13, r26	; 0x0d
    1690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a e7       	ldi	r20, 0x7A	; 122
    16a0:	53 e4       	ldi	r21, 0x43	; 67
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8f 83       	std	Y+7, r24	; 0x07
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	a9 87       	std	Y+9, r26	; 0x09
    16b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <EnterNewPassword+0x444>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <EnterNewPassword+0x4c2>
	else if (__tmp > 65535)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <EnterNewPassword+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <EnterNewPassword+0x4a4>
    1716:	89 e1       	ldi	r24, 0x19	; 25
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <EnterNewPassword+0x492>
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <EnterNewPassword+0x486>
    173c:	b3 cd       	rjmp	.-1178   	; 0x12a4 <EnterNewPassword+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <EnterNewPassword+0x4ce>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	9e cd       	rjmp	.-1220   	; 0x12a4 <EnterNewPassword+0x14>
			_delay_ms(1000);
		}
	}
}
    1768:	ea 96       	adiw	r28, 0x3a	; 58
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <CheckPassword>:

void CheckPassword (void)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	aa 97       	sbiw	r28, 0x2a	; 42
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
	flag=1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 1c 01 	sts	0x011C, r24
	LCD_clearScreen();
    1794:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Current password:");
    1798:	2c e7       	ldi	r18, 0x7C	; 124
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	0e 94 0d 14 	call	0x281a	; 0x281a <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>

	UART_sendByte(MC1_Ready);
    17ae:	80 e1       	ldi	r24, 0x10	; 16
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>
	UART_receiveString(PassMC1);
    17b6:	8f e4       	ldi	r24, 0x4F	; 79
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <UART_receiveString>
	PassMC1[5]='#';
    17be:	83 e2       	ldi	r24, 0x23	; 35
    17c0:	80 93 54 01 	sts	0x0154, r24

	i=0;
    17c4:	10 92 55 01 	sts	0x0155, r1
    17c8:	92 c0       	rjmp	.+292    	; 0x18ee <CheckPassword+0x174>
	while (i<5)
	{
		keyPressed = KeyPad_getPressedKey(); /* get the pressed key number */
    17ca:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
    17ce:	80 93 57 01 	sts	0x0157, r24
		if (PassMC1[i] != keyPressed + '0')
    17d2:	80 91 55 01 	lds	r24, 0x0155
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	fc 01       	movw	r30, r24
    17dc:	e1 5b       	subi	r30, 0xB1	; 177
    17de:	fe 4f       	sbci	r31, 0xFE	; 254
    17e0:	80 81       	ld	r24, Z
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	80 91 57 01 	lds	r24, 0x0157
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	c0 96       	adiw	r24, 0x30	; 48
    17f0:	28 17       	cp	r18, r24
    17f2:	39 07       	cpc	r19, r25
    17f4:	11 f0       	breq	.+4      	; 0x17fa <CheckPassword+0x80>
		{
			flag=0;
    17f6:	10 92 1c 01 	sts	0x011C, r1
		}
		LCD_displayCharacter('*');
    17fa:	8a e2       	ldi	r24, 0x2A	; 42
    17fc:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	aa ef       	ldi	r26, 0xFA	; 250
    1806:	b3 e4       	ldi	r27, 0x43	; 67
    1808:	8f a3       	std	Y+39, r24	; 0x27
    180a:	98 a7       	std	Y+40, r25	; 0x28
    180c:	a9 a7       	std	Y+41, r26	; 0x29
    180e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	6f a1       	ldd	r22, Y+39	; 0x27
    1812:	78 a5       	ldd	r23, Y+40	; 0x28
    1814:	89 a5       	ldd	r24, Y+41	; 0x29
    1816:	9a a5       	ldd	r25, Y+42	; 0x2a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a e7       	ldi	r20, 0x7A	; 122
    181e:	53 e4       	ldi	r21, 0x43	; 67
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8b a3       	std	Y+35, r24	; 0x23
    182a:	9c a3       	std	Y+36, r25	; 0x24
    182c:	ad a3       	std	Y+37, r26	; 0x25
    182e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e8       	ldi	r20, 0x80	; 128
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1844:	88 23       	and	r24, r24
    1846:	2c f4       	brge	.+10     	; 0x1852 <CheckPassword+0xd8>
		__ticks = 1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9a a3       	std	Y+34, r25	; 0x22
    184e:	89 a3       	std	Y+33, r24	; 0x21
    1850:	3f c0       	rjmp	.+126    	; 0x18d0 <CheckPassword+0x156>
	else if (__tmp > 65535)
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	3f ef       	ldi	r19, 0xFF	; 255
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	57 e4       	ldi	r21, 0x47	; 71
    1862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	4c f5       	brge	.+82     	; 0x18bc <CheckPassword+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	6f a1       	ldd	r22, Y+39	; 0x27
    186c:	78 a5       	ldd	r23, Y+40	; 0x28
    186e:	89 a5       	ldd	r24, Y+41	; 0x29
    1870:	9a a5       	ldd	r25, Y+42	; 0x2a
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e2       	ldi	r20, 0x20	; 32
    1878:	51 e4       	ldi	r21, 0x41	; 65
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9a a3       	std	Y+34, r25	; 0x22
    1890:	89 a3       	std	Y+33, r24	; 0x21
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <CheckPassword+0x138>
    1894:	89 e1       	ldi	r24, 0x19	; 25
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	98 a3       	std	Y+32, r25	; 0x20
    189a:	8f 8f       	std	Y+31, r24	; 0x1f
    189c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    189e:	98 a1       	ldd	r25, Y+32	; 0x20
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <CheckPassword+0x126>
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	9a a3       	std	Y+34, r25	; 0x22
    18b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b2:	89 a1       	ldd	r24, Y+33	; 0x21
    18b4:	9a a1       	ldd	r25, Y+34	; 0x22
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	69 f7       	brne	.-38     	; 0x1894 <CheckPassword+0x11a>
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <CheckPassword+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18bc:	6b a1       	ldd	r22, Y+35	; 0x23
    18be:	7c a1       	ldd	r23, Y+36	; 0x24
    18c0:	8d a1       	ldd	r24, Y+37	; 0x25
    18c2:	9e a1       	ldd	r25, Y+38	; 0x26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	9a a3       	std	Y+34, r25	; 0x22
    18ce:	89 a3       	std	Y+33, r24	; 0x21
    18d0:	89 a1       	ldd	r24, Y+33	; 0x21
    18d2:	9a a1       	ldd	r25, Y+34	; 0x22
    18d4:	9e 8f       	std	Y+30, r25	; 0x1e
    18d6:	8d 8f       	std	Y+29, r24	; 0x1d
    18d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <CheckPassword+0x162>
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500); /* Press time */
		i++;
    18e4:	80 91 55 01 	lds	r24, 0x0155
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 93 55 01 	sts	0x0155, r24
	UART_sendByte(MC1_Ready);
	UART_receiveString(PassMC1);
	PassMC1[5]='#';

	i=0;
	while (i<5)
    18ee:	80 91 55 01 	lds	r24, 0x0155
    18f2:	85 30       	cpi	r24, 0x05	; 5
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <CheckPassword+0x17e>
    18f6:	69 cf       	rjmp	.-302    	; 0x17ca <CheckPassword+0x50>
		LCD_displayCharacter('*');
		_delay_ms(500); /* Press time */
		i++;
	}

	if (flag==1)
    18f8:	80 91 1c 01 	lds	r24, 0x011C
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	19 f4       	brne	.+6      	; 0x1906 <CheckPassword+0x18c>
	{
		OpenDoorMC1();
    1900:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <OpenDoorMC1>
    1904:	3d c1       	rjmp	.+634    	; 0x1b80 <CheckPassword+0x406>
	}
	else if (flag==0)
    1906:	80 91 1c 01 	lds	r24, 0x011C
    190a:	88 23       	and	r24, r24
    190c:	09 f0       	breq	.+2      	; 0x1910 <CheckPassword+0x196>
    190e:	38 c1       	rjmp	.+624    	; 0x1b80 <CheckPassword+0x406>
	{
		j=0;
    1910:	10 92 4e 01 	sts	0x014E, r1
		do {
			flag=1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	80 93 1c 01 	sts	0x011C, r24
			LCD_clearScreen();
    191a:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
    191e:	8e e8       	ldi	r24, 0x8E	; 142
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	aa e7       	ldi	r26, 0x7A	; 122
    192c:	b4 e4       	ldi	r27, 0x44	; 68
    192e:	89 8f       	std	Y+25, r24	; 0x19
    1930:	9a 8f       	std	Y+26, r25	; 0x1a
    1932:	ab 8f       	std	Y+27, r26	; 0x1b
    1934:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1936:	69 8d       	ldd	r22, Y+25	; 0x19
    1938:	7a 8d       	ldd	r23, Y+26	; 0x1a
    193a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    193c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	4a e7       	ldi	r20, 0x7A	; 122
    1944:	53 e4       	ldi	r21, 0x43	; 67
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	8d 8b       	std	Y+21, r24	; 0x15
    1950:	9e 8b       	std	Y+22, r25	; 0x16
    1952:	af 8b       	std	Y+23, r26	; 0x17
    1954:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	40 e8       	ldi	r20, 0x80	; 128
    1964:	5f e3       	ldi	r21, 0x3F	; 63
    1966:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    196a:	88 23       	and	r24, r24
    196c:	2c f4       	brge	.+10     	; 0x1978 <CheckPassword+0x1fe>
		__ticks = 1;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 8b       	std	Y+20, r25	; 0x14
    1974:	8b 8b       	std	Y+19, r24	; 0x13
    1976:	3f c0       	rjmp	.+126    	; 0x19f6 <CheckPassword+0x27c>
	else if (__tmp > 65535)
    1978:	6d 89       	ldd	r22, Y+21	; 0x15
    197a:	7e 89       	ldd	r23, Y+22	; 0x16
    197c:	8f 89       	ldd	r24, Y+23	; 0x17
    197e:	98 8d       	ldd	r25, Y+24	; 0x18
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	3f ef       	ldi	r19, 0xFF	; 255
    1984:	4f e7       	ldi	r20, 0x7F	; 127
    1986:	57 e4       	ldi	r21, 0x47	; 71
    1988:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    198c:	18 16       	cp	r1, r24
    198e:	4c f5       	brge	.+82     	; 0x19e2 <CheckPassword+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1990:	69 8d       	ldd	r22, Y+25	; 0x19
    1992:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1994:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1996:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <CheckPassword+0x25e>
    19ba:	89 e1       	ldi	r24, 0x19	; 25
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9a 8b       	std	Y+18, r25	; 0x12
    19c0:	89 8b       	std	Y+17, r24	; 0x11
    19c2:	89 89       	ldd	r24, Y+17	; 0x11
    19c4:	9a 89       	ldd	r25, Y+18	; 0x12
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <CheckPassword+0x24c>
    19ca:	9a 8b       	std	Y+18, r25	; 0x12
    19cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ce:	8b 89       	ldd	r24, Y+19	; 0x13
    19d0:	9c 89       	ldd	r25, Y+20	; 0x14
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	9c 8b       	std	Y+20, r25	; 0x14
    19d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	69 f7       	brne	.-38     	; 0x19ba <CheckPassword+0x240>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <CheckPassword+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9c 8b       	std	Y+20, r25	; 0x14
    19f4:	8b 8b       	std	Y+19, r24	; 0x13
    19f6:	8b 89       	ldd	r24, Y+19	; 0x13
    19f8:	9c 89       	ldd	r25, Y+20	; 0x14
    19fa:	98 8b       	std	Y+16, r25	; 0x10
    19fc:	8f 87       	std	Y+15, r24	; 0x0f
    19fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a00:	98 89       	ldd	r25, Y+16	; 0x10
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <CheckPassword+0x288>
    1a06:	98 8b       	std	Y+16, r25	; 0x10
    1a08:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_clearScreen();
    1a0a:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
			LCD_displayString("Current Password:");
    1a0e:	8d e9       	ldi	r24, 0x9D	; 157
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>

			i=0;
    1a1e:	10 92 55 01 	sts	0x0155, r1
    1a22:	92 c0       	rjmp	.+292    	; 0x1b48 <CheckPassword+0x3ce>
			while (i<5)
			{
				keyPressed = KeyPad_getPressedKey(); /* get the pressed key number */
    1a24:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <KeyPad_getPressedKey>
    1a28:	80 93 57 01 	sts	0x0157, r24
				if (PassMC1[i] != keyPressed+'0')
    1a2c:	80 91 55 01 	lds	r24, 0x0155
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	e1 5b       	subi	r30, 0xB1	; 177
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	80 81       	ld	r24, Z
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	80 91 57 01 	lds	r24, 0x0157
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	c0 96       	adiw	r24, 0x30	; 48
    1a4a:	28 17       	cp	r18, r24
    1a4c:	39 07       	cpc	r19, r25
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <CheckPassword+0x2da>
				{
					flag=0;
    1a50:	10 92 1c 01 	sts	0x011C, r1
				}
				LCD_displayCharacter('*');
    1a54:	8a e2       	ldi	r24, 0x2A	; 42
    1a56:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	aa ef       	ldi	r26, 0xFA	; 250
    1a60:	b3 e4       	ldi	r27, 0x43	; 67
    1a62:	8b 87       	std	Y+11, r24	; 0x0b
    1a64:	9c 87       	std	Y+12, r25	; 0x0c
    1a66:	ad 87       	std	Y+13, r26	; 0x0d
    1a68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a e7       	ldi	r20, 0x7A	; 122
    1a78:	53 e4       	ldi	r21, 0x43	; 67
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	8f 83       	std	Y+7, r24	; 0x07
    1a84:	98 87       	std	Y+8, r25	; 0x08
    1a86:	a9 87       	std	Y+9, r26	; 0x09
    1a88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <CheckPassword+0x332>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <CheckPassword+0x3b0>
	else if (__tmp > 65535)
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	3f ef       	ldi	r19, 0xFF	; 255
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	57 e4       	ldi	r21, 0x47	; 71
    1abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	4c f5       	brge	.+82     	; 0x1b16 <CheckPassword+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <CheckPassword+0x392>
    1aee:	89 e1       	ldi	r24, 0x19	; 25
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <CheckPassword+0x380>
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	69 f7       	brne	.-38     	; 0x1aee <CheckPassword+0x374>
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <CheckPassword+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <CheckPassword+0x3bc>
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500); /* Press time */
				i++;
    1b3e:	80 91 55 01 	lds	r24, 0x0155
    1b42:	8f 5f       	subi	r24, 0xFF	; 255
    1b44:	80 93 55 01 	sts	0x0155, r24
			LCD_clearScreen();
			LCD_displayString("Current Password:");
			LCD_goToRowColumn(1,0);

			i=0;
			while (i<5)
    1b48:	80 91 55 01 	lds	r24, 0x0155
    1b4c:	85 30       	cpi	r24, 0x05	; 5
    1b4e:	08 f4       	brcc	.+2      	; 0x1b52 <CheckPassword+0x3d8>
    1b50:	69 cf       	rjmp	.-302    	; 0x1a24 <CheckPassword+0x2aa>
				}
				LCD_displayCharacter('*');
				_delay_ms(500); /* Press time */
				i++;
			}
			j++;
    1b52:	80 91 4e 01 	lds	r24, 0x014E
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 93 4e 01 	sts	0x014E, r24
		}while (j<2 && flag==0);
    1b5c:	80 91 4e 01 	lds	r24, 0x014E
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	28 f4       	brcc	.+10     	; 0x1b6e <CheckPassword+0x3f4>
    1b64:	80 91 1c 01 	lds	r24, 0x011C
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <CheckPassword+0x3f4>
    1b6c:	d3 ce       	rjmp	.-602    	; 0x1914 <CheckPassword+0x19a>

		if (flag==0)
    1b6e:	80 91 1c 01 	lds	r24, 0x011C
    1b72:	88 23       	and	r24, r24
    1b74:	19 f4       	brne	.+6      	; 0x1b7c <CheckPassword+0x402>
		{
			BuzzerMC1();
    1b76:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <BuzzerMC1>
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <CheckPassword+0x406>
		}
		else
		{
			OpenDoorMC1();
    1b7c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <OpenDoorMC1>
		}
	}
}
    1b80:	aa 96       	adiw	r28, 0x2a	; 42
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <OpenDoorMC1>:

void OpenDoorMC1(void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	2c 97       	sbiw	r28, 0x0c	; 12
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
	while (UART_receiveByte() != MC2_Ready) {}
    1ba6:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	91 05       	cpc	r25, r1
    1bae:	d9 f7       	brne	.-10     	; 0x1ba6 <OpenDoorMC1+0x14>
	UART_sendByte (OK);
    1bb0:	8a ea       	ldi	r24, 0xAA	; 170
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>

	Timer1_setCallBack(StopDoorMC1);
    1bb8:	8c e1       	ldi	r24, 0x1C	; 28
    1bba:	9e e0       	ldi	r25, 0x0E	; 14
    1bbc:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <Timer1_setCallBack>
	LCD_clearScreen();
    1bc0:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayString ("Opening Door");
    1bc4:	88 ee       	ldi	r24, 0xE8	; 232
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
	Timer1_ConfigType timer1_config = {F_CPU1024, COM1_NORMAL_MODE, TIMER1_OCB,0, 7812*15};
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	99 87       	std	Y+9, r25	; 0x09
    1bd2:	88 87       	std	Y+8, r24	; 0x08
    1bd4:	e4 e2       	ldi	r30, 0x24	; 36
    1bd6:	f1 e0       	ldi	r31, 0x01	; 1
    1bd8:	fb 87       	std	Y+11, r31	; 0x0b
    1bda:	ea 87       	std	Y+10, r30	; 0x0a
    1bdc:	f7 e0       	ldi	r31, 0x07	; 7
    1bde:	fc 87       	std	Y+12, r31	; 0x0c
    1be0:	ea 85       	ldd	r30, Y+10	; 0x0a
    1be2:	fb 85       	ldd	r31, Y+11	; 0x0b
    1be4:	00 80       	ld	r0, Z
    1be6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1be8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	9b 87       	std	Y+11, r25	; 0x0b
    1bee:	8a 87       	std	Y+10, r24	; 0x0a
    1bf0:	e8 85       	ldd	r30, Y+8	; 0x08
    1bf2:	f9 85       	ldd	r31, Y+9	; 0x09
    1bf4:	00 82       	st	Z, r0
    1bf6:	88 85       	ldd	r24, Y+8	; 0x08
    1bf8:	99 85       	ldd	r25, Y+9	; 0x09
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	99 87       	std	Y+9, r25	; 0x09
    1bfe:	88 87       	std	Y+8, r24	; 0x08
    1c00:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c02:	91 50       	subi	r25, 0x01	; 1
    1c04:	9c 87       	std	Y+12, r25	; 0x0c
    1c06:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c08:	ee 23       	and	r30, r30
    1c0a:	51 f7       	brne	.-44     	; 0x1be0 <OpenDoorMC1+0x4e>
	timer1_init(&timer1_config);
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	0e 94 80 14 	call	0x2900	; 0x2900 <timer1_init>
	while (g_Timer1_Call_Back_Ptr != ClosingDoorMC1){}
    1c14:	20 91 49 01 	lds	r18, 0x0149
    1c18:	30 91 4a 01 	lds	r19, 0x014A
    1c1c:	86 e6       	ldi	r24, 0x66	; 102
    1c1e:	9e e0       	ldi	r25, 0x0E	; 14
    1c20:	28 17       	cp	r18, r24
    1c22:	39 07       	cpc	r19, r25
    1c24:	b9 f7       	brne	.-18     	; 0x1c14 <OpenDoorMC1+0x82>
}
    1c26:	2c 96       	adiw	r28, 0x0c	; 12
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <StopDoorMC1>:

void StopDoorMC1(void)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	2c 97       	sbiw	r28, 0x0c	; 12
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(ClosingDoorMC1);
    1c4c:	86 e6       	ldi	r24, 0x66	; 102
    1c4e:	9e e0       	ldi	r25, 0x0E	; 14
    1c50:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <Timer1_setCallBack>
	LCD_clearScreen();
    1c54:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayString ("Welcome");
    1c58:	85 ef       	ldi	r24, 0xF5	; 245
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
	Timer1_ConfigType timer1_config = {F_CPU1024, COM1_NORMAL_MODE, TIMER1_OCB,0, 7812*3};
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	99 87       	std	Y+9, r25	; 0x09
    1c66:	88 87       	std	Y+8, r24	; 0x08
    1c68:	eb e2       	ldi	r30, 0x2B	; 43
    1c6a:	f1 e0       	ldi	r31, 0x01	; 1
    1c6c:	fb 87       	std	Y+11, r31	; 0x0b
    1c6e:	ea 87       	std	Y+10, r30	; 0x0a
    1c70:	f7 e0       	ldi	r31, 0x07	; 7
    1c72:	fc 87       	std	Y+12, r31	; 0x0c
    1c74:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c76:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c78:	00 80       	ld	r0, Z
    1c7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	9b 87       	std	Y+11, r25	; 0x0b
    1c82:	8a 87       	std	Y+10, r24	; 0x0a
    1c84:	e8 85       	ldd	r30, Y+8	; 0x08
    1c86:	f9 85       	ldd	r31, Y+9	; 0x09
    1c88:	00 82       	st	Z, r0
    1c8a:	88 85       	ldd	r24, Y+8	; 0x08
    1c8c:	99 85       	ldd	r25, Y+9	; 0x09
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	99 87       	std	Y+9, r25	; 0x09
    1c92:	88 87       	std	Y+8, r24	; 0x08
    1c94:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c96:	91 50       	subi	r25, 0x01	; 1
    1c98:	9c 87       	std	Y+12, r25	; 0x0c
    1c9a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c9c:	ee 23       	and	r30, r30
    1c9e:	51 f7       	brne	.-44     	; 0x1c74 <StopDoorMC1+0x3c>
	timer1_init(&timer1_config);
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 80 14 	call	0x2900	; 0x2900 <timer1_init>
	while (g_Timer1_Call_Back_Ptr != Timer1_Stop){}
    1ca8:	20 91 49 01 	lds	r18, 0x0149
    1cac:	30 91 4a 01 	lds	r19, 0x014A
    1cb0:	82 e7       	ldi	r24, 0x72	; 114
    1cb2:	95 e1       	ldi	r25, 0x15	; 21
    1cb4:	28 17       	cp	r18, r24
    1cb6:	39 07       	cpc	r19, r25
    1cb8:	b9 f7       	brne	.-18     	; 0x1ca8 <StopDoorMC1+0x70>

}
    1cba:	2c 96       	adiw	r28, 0x0c	; 12
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <ClosingDoorMC1>:

void ClosingDoorMC1(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	2c 97       	sbiw	r28, 0x0c	; 12
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(Timer1_Stop);
    1ce0:	82 e7       	ldi	r24, 0x72	; 114
    1ce2:	95 e1       	ldi	r25, 0x15	; 21
    1ce4:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <Timer1_setCallBack>
	LCD_clearScreen();
    1ce8:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayString ("Closing Door");
    1cec:	8d ef       	ldi	r24, 0xFD	; 253
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
	Timer1_ConfigType timer1_config = {F_CPU1024, COM1_NORMAL_MODE, TIMER1_OCB,0, 7812*15};
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	99 87       	std	Y+9, r25	; 0x09
    1cfa:	88 87       	std	Y+8, r24	; 0x08
    1cfc:	e2 e3       	ldi	r30, 0x32	; 50
    1cfe:	f1 e0       	ldi	r31, 0x01	; 1
    1d00:	fb 87       	std	Y+11, r31	; 0x0b
    1d02:	ea 87       	std	Y+10, r30	; 0x0a
    1d04:	f7 e0       	ldi	r31, 0x07	; 7
    1d06:	fc 87       	std	Y+12, r31	; 0x0c
    1d08:	ea 85       	ldd	r30, Y+10	; 0x0a
    1d0a:	fb 85       	ldd	r31, Y+11	; 0x0b
    1d0c:	00 80       	ld	r0, Z
    1d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	9b 87       	std	Y+11, r25	; 0x0b
    1d16:	8a 87       	std	Y+10, r24	; 0x0a
    1d18:	e8 85       	ldd	r30, Y+8	; 0x08
    1d1a:	f9 85       	ldd	r31, Y+9	; 0x09
    1d1c:	00 82       	st	Z, r0
    1d1e:	88 85       	ldd	r24, Y+8	; 0x08
    1d20:	99 85       	ldd	r25, Y+9	; 0x09
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	99 87       	std	Y+9, r25	; 0x09
    1d26:	88 87       	std	Y+8, r24	; 0x08
    1d28:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d2a:	91 50       	subi	r25, 0x01	; 1
    1d2c:	9c 87       	std	Y+12, r25	; 0x0c
    1d2e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d30:	ee 23       	and	r30, r30
    1d32:	51 f7       	brne	.-44     	; 0x1d08 <ClosingDoorMC1+0x3c>
	timer1_init(&timer1_config);
    1d34:	ce 01       	movw	r24, r28
    1d36:	01 96       	adiw	r24, 0x01	; 1
    1d38:	0e 94 80 14 	call	0x2900	; 0x2900 <timer1_init>
	while ((TCCR1B)&0x03){}
    1d3c:	ee e4       	ldi	r30, 0x4E	; 78
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	83 70       	andi	r24, 0x03	; 3
    1d48:	90 70       	andi	r25, 0x00	; 0
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	b9 f7       	brne	.-18     	; 0x1d3c <ClosingDoorMC1+0x70>
}
    1d4e:	2c 96       	adiw	r28, 0x0c	; 12
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <BuzzerMC1>:

void BuzzerMC1 (void)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	2c 97       	sbiw	r28, 0x0c	; 12
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
	while (UART_receiveByte() != MC2_Ready) {}
    1d74:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	d9 f7       	brne	.-10     	; 0x1d74 <BuzzerMC1+0x14>
	UART_sendByte (BUZZER);
    1d7e:	85 e5       	ldi	r24, 0x55	; 85
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>

	Timer1_setCallBack(Timer1_Stop);
    1d86:	82 e7       	ldi	r24, 0x72	; 114
    1d88:	95 e1       	ldi	r25, 0x15	; 21
    1d8a:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <Timer1_setCallBack>
	LCD_clearScreen();
    1d8e:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_clearScreen>
	LCD_displayString ("BUZZER!!!");
    1d92:	8a e0       	ldi	r24, 0x0A	; 10
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
	Timer1_ConfigType timer1_config = {F_CPU1024, COM1_NORMAL_MODE, TIMER1_OCB,0, 7812*60};
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	99 87       	std	Y+9, r25	; 0x09
    1da0:	88 87       	std	Y+8, r24	; 0x08
    1da2:	e9 e3       	ldi	r30, 0x39	; 57
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	fb 87       	std	Y+11, r31	; 0x0b
    1da8:	ea 87       	std	Y+10, r30	; 0x0a
    1daa:	f7 e0       	ldi	r31, 0x07	; 7
    1dac:	fc 87       	std	Y+12, r31	; 0x0c
    1dae:	ea 85       	ldd	r30, Y+10	; 0x0a
    1db0:	fb 85       	ldd	r31, Y+11	; 0x0b
    1db2:	00 80       	ld	r0, Z
    1db4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	9b 87       	std	Y+11, r25	; 0x0b
    1dbc:	8a 87       	std	Y+10, r24	; 0x0a
    1dbe:	e8 85       	ldd	r30, Y+8	; 0x08
    1dc0:	f9 85       	ldd	r31, Y+9	; 0x09
    1dc2:	00 82       	st	Z, r0
    1dc4:	88 85       	ldd	r24, Y+8	; 0x08
    1dc6:	99 85       	ldd	r25, Y+9	; 0x09
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	99 87       	std	Y+9, r25	; 0x09
    1dcc:	88 87       	std	Y+8, r24	; 0x08
    1dce:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	9c 87       	std	Y+12, r25	; 0x0c
    1dd4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1dd6:	ee 23       	and	r30, r30
    1dd8:	51 f7       	brne	.-44     	; 0x1dae <BuzzerMC1+0x4e>
	timer1_init(&timer1_config);
    1dda:	ce 01       	movw	r24, r28
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	0e 94 80 14 	call	0x2900	; 0x2900 <timer1_init>
	while ((TCCR1B)&0x03){}
    1de2:	ee e4       	ldi	r30, 0x4E	; 78
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	83 70       	andi	r24, 0x03	; 3
    1dee:	90 70       	andi	r25, 0x00	; 0
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	b9 f7       	brne	.-18     	; 0x1de2 <BuzzerMC1+0x82>

}
    1df4:	2c 96       	adiw	r28, 0x0c	; 12
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	00 d0       	rcall	.+0      	; 0x1e0c <KeyPad_getPressedKey+0x6>
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1e10:	1a 82       	std	Y+2, r1	; 0x02
    1e12:	4d c0       	rjmp	.+154    	; 0x1eae <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1e14:	ea e3       	ldi	r30, 0x3A	; 58
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	80 e1       	ldi	r24, 0x10	; 16
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <KeyPad_getPressedKey+0x22>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	2a 95       	dec	r18
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <KeyPad_getPressedKey+0x1e>
    1e2c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1e2e:	eb e3       	ldi	r30, 0x3B	; 59
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	80 e1       	ldi	r24, 0x10	; 16
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <KeyPad_getPressedKey+0x3e>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <KeyPad_getPressedKey+0x3a>
    1e48:	80 95       	com	r24
    1e4a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1e4c:	19 82       	std	Y+1, r1	; 0x01
    1e4e:	29 c0       	rjmp	.+82     	; 0x1ea2 <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1e50:	e9 e3       	ldi	r30, 0x39	; 57
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a9 01       	movw	r20, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <KeyPad_getPressedKey+0x62>
    1e64:	55 95       	asr	r21
    1e66:	47 95       	ror	r20
    1e68:	8a 95       	dec	r24
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <KeyPad_getPressedKey+0x5e>
    1e6c:	ca 01       	movw	r24, r20
    1e6e:	81 70       	andi	r24, 0x01	; 1
    1e70:	90 70       	andi	r25, 0x00	; 0
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	99 f4       	brne	.+38     	; 0x1e9c <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	82 0f       	add	r24, r18
    1e84:	93 1f       	adc	r25, r19
    1e86:	98 2f       	mov	r25, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	89 0f       	add	r24, r25
    1e8c:	8f 5f       	subi	r24, 0xFF	; 255
    1e8e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <KeyPad_4x3_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	a0 f2       	brcs	.-88     	; 0x1e50 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	8a 83       	std	Y+2, r24	; 0x02
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	08 f4       	brcc	.+2      	; 0x1eb6 <KeyPad_getPressedKey+0xb0>
    1eb4:	af cf       	rjmp	.-162    	; 0x1e14 <KeyPad_getPressedKey+0xe>
    1eb6:	ac cf       	rjmp	.-168    	; 0x1e10 <KeyPad_getPressedKey+0xa>

00001eb8 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <KeyPad_4x3_adjustKeyNumber+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <KeyPad_4x3_adjustKeyNumber+0x8>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3c 83       	std	Y+4, r19	; 0x04
    1ece:	2b 83       	std	Y+3, r18	; 0x03
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	8a 30       	cpi	r24, 0x0A	; 10
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	81 f0       	breq	.+32     	; 0x1efa <KeyPad_4x3_adjustKeyNumber+0x42>
    1eda:	2b 81       	ldd	r18, Y+3	; 0x03
    1edc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ede:	2a 30       	cpi	r18, 0x0A	; 10
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	9c f0       	brlt	.+38     	; 0x1f0a <KeyPad_4x3_adjustKeyNumber+0x52>
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	8b 30       	cpi	r24, 0x0B	; 11
    1eea:	91 05       	cpc	r25, r1
    1eec:	49 f0       	breq	.+18     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0x48>
    1eee:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef2:	2c 30       	cpi	r18, 0x0C	; 12
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <KeyPad_4x3_adjustKeyNumber+0x4c>
    1ef8:	08 c0       	rjmp	.+16     	; 0x1f0a <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of *
    1efa:	3a e2       	ldi	r19, 0x2A	; 42
    1efc:	3a 83       	std	Y+2, r19	; 0x02
    1efe:	07 c0       	rjmp	.+14     	; 0x1f0e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    1f00:	1a 82       	std	Y+2, r1	; 0x02
    1f02:	05 c0       	rjmp	.+10     	; 0x1f0e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of #
    1f04:	83 e2       	ldi	r24, 0x23	; 35
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
    1f0a:	99 81       	ldd	r25, Y+1	; 0x01
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1f26:	a1 e3       	ldi	r26, 0x31	; 49
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e1 e3       	ldi	r30, 0x31	; 49
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	80 67       	ori	r24, 0x70	; 112
    1f32:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1f34:	e7 e3       	ldi	r30, 0x37	; 55
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	8f ef       	ldi	r24, 0xFF	; 255
    1f3a:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1f3c:	88 e3       	ldi	r24, 0x38	; 56
    1f3e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1f42:	8c e0       	ldi	r24, 0x0C	; 12
    1f44:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_sendCommand>
}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	e9 97       	sbiw	r28, 0x39	; 57
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1f6a:	a2 e3       	ldi	r26, 0x32	; 50
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e2 e3       	ldi	r30, 0x32	; 50
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8f 7e       	andi	r24, 0xEF	; 239
    1f76:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1f78:	a2 e3       	ldi	r26, 0x32	; 50
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e2 e3       	ldi	r30, 0x32	; 50
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8f 7d       	andi	r24, 0xDF	; 223
    1f84:	8c 93       	st	X, r24
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	8d ab       	std	Y+53, r24	; 0x35
    1f90:	9e ab       	std	Y+54, r25	; 0x36
    1f92:	af ab       	std	Y+55, r26	; 0x37
    1f94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	6d a9       	ldd	r22, Y+53	; 0x35
    1f98:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a e7       	ldi	r20, 0x7A	; 122
    1fa4:	53 e4       	ldi	r21, 0x43	; 67
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	89 ab       	std	Y+49, r24	; 0x31
    1fb0:	9a ab       	std	Y+50, r25	; 0x32
    1fb2:	ab ab       	std	Y+51, r26	; 0x33
    1fb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1fba:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <LCD_sendCommand+0x84>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	98 ab       	std	Y+48, r25	; 0x30
    1fd4:	8f a7       	std	Y+47, r24	; 0x2f
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1fd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fda:	7a a9       	ldd	r23, Y+50	; 0x32
    1fdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1fde:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	98 ab       	std	Y+48, r25	; 0x30
    2016:	8f a7       	std	Y+47, r24	; 0x2f
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <LCD_sendCommand+0xe4>
    201a:	89 e1       	ldi	r24, 0x19	; 25
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9e a7       	std	Y+46, r25	; 0x2e
    2020:	8d a7       	std	Y+45, r24	; 0x2d
    2022:	8d a5       	ldd	r24, Y+45	; 0x2d
    2024:	9e a5       	ldd	r25, Y+46	; 0x2e
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_sendCommand+0xd2>
    202a:	9e a7       	std	Y+46, r25	; 0x2e
    202c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2030:	98 a9       	ldd	r25, Y+48	; 0x30
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	98 ab       	std	Y+48, r25	; 0x30
    2036:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8f a5       	ldd	r24, Y+47	; 0x2f
    203a:	98 a9       	ldd	r25, Y+48	; 0x30
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <LCD_sendCommand+0xc6>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	69 a9       	ldd	r22, Y+49	; 0x31
    2044:	7a a9       	ldd	r23, Y+50	; 0x32
    2046:	8b a9       	ldd	r24, Y+51	; 0x33
    2048:	9c a9       	ldd	r25, Y+52	; 0x34
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	98 ab       	std	Y+48, r25	; 0x30
    2054:	8f a7       	std	Y+47, r24	; 0x2f
    2056:	8f a5       	ldd	r24, Y+47	; 0x2f
    2058:	98 a9       	ldd	r25, Y+48	; 0x30
    205a:	9c a7       	std	Y+44, r25	; 0x2c
    205c:	8b a7       	std	Y+43, r24	; 0x2b
    205e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2060:	9c a5       	ldd	r25, Y+44	; 0x2c
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0x10e>
    2066:	9c a7       	std	Y+44, r25	; 0x2c
    2068:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    206a:	a2 e3       	ldi	r26, 0x32	; 50
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e2 e3       	ldi	r30, 0x32	; 50
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	8c 93       	st	X, r24
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	a0 e8       	ldi	r26, 0x80	; 128
    207e:	bf e3       	ldi	r27, 0x3F	; 63
    2080:	8f a3       	std	Y+39, r24	; 0x27
    2082:	98 a7       	std	Y+40, r25	; 0x28
    2084:	a9 a7       	std	Y+41, r26	; 0x29
    2086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6f a1       	ldd	r22, Y+39	; 0x27
    208a:	78 a5       	ldd	r23, Y+40	; 0x28
    208c:	89 a5       	ldd	r24, Y+41	; 0x29
    208e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a e7       	ldi	r20, 0x7A	; 122
    2096:	53 e4       	ldi	r21, 0x43	; 67
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8b a3       	std	Y+35, r24	; 0x23
    20a2:	9c a3       	std	Y+36, r25	; 0x24
    20a4:	ad a3       	std	Y+37, r26	; 0x25
    20a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <LCD_sendCommand+0x176>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6f a1       	ldd	r22, Y+39	; 0x27
    20e4:	78 a5       	ldd	r23, Y+40	; 0x28
    20e6:	89 a5       	ldd	r24, Y+41	; 0x29
    20e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_sendCommand+0x1d6>
    210c:	89 e1       	ldi	r24, 0x19	; 25
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
    2114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2116:	98 a1       	ldd	r25, Y+32	; 0x20
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_sendCommand+0x1c4>
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9a a3       	std	Y+34, r25	; 0x22
    2128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <LCD_sendCommand+0x1b8>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	89 a1       	ldd	r24, Y+33	; 0x21
    214a:	9a a1       	ldd	r25, Y+34	; 0x22
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_sendCommand+0x200>
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    215c:	e8 e3       	ldi	r30, 0x38	; 56
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	89 ad       	ldd	r24, Y+57	; 0x39
    2162:	80 83       	st	Z, r24
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a0 e8       	ldi	r26, 0x80	; 128
    216a:	bf e3       	ldi	r27, 0x3F	; 63
    216c:	89 8f       	std	Y+25, r24	; 0x19
    216e:	9a 8f       	std	Y+26, r25	; 0x1a
    2170:	ab 8f       	std	Y+27, r26	; 0x1b
    2172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2174:	69 8d       	ldd	r22, Y+25	; 0x19
    2176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	4a e7       	ldi	r20, 0x7A	; 122
    2182:	53 e4       	ldi	r21, 0x43	; 67
    2184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	8d 8b       	std	Y+21, r24	; 0x15
    218e:	9e 8b       	std	Y+22, r25	; 0x16
    2190:	af 8b       	std	Y+23, r26	; 0x17
    2192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e8       	ldi	r20, 0x80	; 128
    21a2:	5f e3       	ldi	r21, 0x3F	; 63
    21a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a8:	88 23       	and	r24, r24
    21aa:	2c f4       	brge	.+10     	; 0x21b6 <LCD_sendCommand+0x262>
		__ticks = 1;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 8b       	std	Y+20, r25	; 0x14
    21b2:	8b 8b       	std	Y+19, r24	; 0x13
    21b4:	3f c0       	rjmp	.+126    	; 0x2234 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	3f ef       	ldi	r19, 0xFF	; 255
    21c2:	4f e7       	ldi	r20, 0x7F	; 127
    21c4:	57 e4       	ldi	r21, 0x47	; 71
    21c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ca:	18 16       	cp	r1, r24
    21cc:	4c f5       	brge	.+82     	; 0x2220 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e2       	ldi	r20, 0x20	; 32
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	0f c0       	rjmp	.+30     	; 0x2216 <LCD_sendCommand+0x2c2>
    21f8:	89 e1       	ldi	r24, 0x19	; 25
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	89 8b       	std	Y+17, r24	; 0x11
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	9a 89       	ldd	r25, Y+18	; 0x12
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <LCD_sendCommand+0x2b0>
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220c:	8b 89       	ldd	r24, Y+19	; 0x13
    220e:	9c 89       	ldd	r25, Y+20	; 0x14
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9c 8b       	std	Y+20, r25	; 0x14
    2214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	69 f7       	brne	.-38     	; 0x21f8 <LCD_sendCommand+0x2a4>
    221e:	14 c0       	rjmp	.+40     	; 0x2248 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	6d 89       	ldd	r22, Y+21	; 0x15
    2222:	7e 89       	ldd	r23, Y+22	; 0x16
    2224:	8f 89       	ldd	r24, Y+23	; 0x17
    2226:	98 8d       	ldd	r25, Y+24	; 0x18
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	9c 8b       	std	Y+20, r25	; 0x14
    2232:	8b 8b       	std	Y+19, r24	; 0x13
    2234:	8b 89       	ldd	r24, Y+19	; 0x13
    2236:	9c 89       	ldd	r25, Y+20	; 0x14
    2238:	98 8b       	std	Y+16, r25	; 0x10
    223a:	8f 87       	std	Y+15, r24	; 0x0f
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	98 89       	ldd	r25, Y+16	; 0x10
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	f1 f7       	brne	.-4      	; 0x2240 <LCD_sendCommand+0x2ec>
    2244:	98 8b       	std	Y+16, r25	; 0x10
    2246:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2248:	a2 e3       	ldi	r26, 0x32	; 50
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e2 e3       	ldi	r30, 0x32	; 50
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	8f 7b       	andi	r24, 0xBF	; 191
    2254:	8c 93       	st	X, r24
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e8       	ldi	r26, 0x80	; 128
    225c:	bf e3       	ldi	r27, 0x3F	; 63
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a e7       	ldi	r20, 0x7A	; 122
    2274:	53 e4       	ldi	r21, 0x43	; 67
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_sendCommand+0x354>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_sendCommand+0x3b4>
    22ea:	89 e1       	ldi	r24, 0x19	; 25
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_sendCommand+0x3a2>
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_sendCommand+0x396>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_sendCommand+0x3de>
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    233a:	e9 96       	adiw	r28, 0x39	; 57
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	e9 97       	sbiw	r28, 0x39	; 57
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2362:	a2 e3       	ldi	r26, 0x32	; 50
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e2 e3       	ldi	r30, 0x32	; 50
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 61       	ori	r24, 0x10	; 16
    236e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2370:	a2 e3       	ldi	r26, 0x32	; 50
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e2 e3       	ldi	r30, 0x32	; 50
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8f 7d       	andi	r24, 0xDF	; 223
    237c:	8c 93       	st	X, r24
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	bf e3       	ldi	r27, 0x3F	; 63
    2386:	8d ab       	std	Y+53, r24	; 0x35
    2388:	9e ab       	std	Y+54, r25	; 0x36
    238a:	af ab       	std	Y+55, r26	; 0x37
    238c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6d a9       	ldd	r22, Y+53	; 0x35
    2390:	7e a9       	ldd	r23, Y+54	; 0x36
    2392:	8f a9       	ldd	r24, Y+55	; 0x37
    2394:	98 ad       	ldd	r25, Y+56	; 0x38
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a e7       	ldi	r20, 0x7A	; 122
    239c:	53 e4       	ldi	r21, 0x43	; 67
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	89 ab       	std	Y+49, r24	; 0x31
    23a8:	9a ab       	std	Y+50, r25	; 0x32
    23aa:	ab ab       	std	Y+51, r26	; 0x33
    23ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ae:	69 a9       	ldd	r22, Y+49	; 0x31
    23b0:	7a a9       	ldd	r23, Y+50	; 0x32
    23b2:	8b a9       	ldd	r24, Y+51	; 0x33
    23b4:	9c a9       	ldd	r25, Y+52	; 0x34
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <LCD_displayCharacter+0x84>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	98 ab       	std	Y+48, r25	; 0x30
    23cc:	8f a7       	std	Y+47, r24	; 0x2f
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    23d0:	69 a9       	ldd	r22, Y+49	; 0x31
    23d2:	7a a9       	ldd	r23, Y+50	; 0x32
    23d4:	8b a9       	ldd	r24, Y+51	; 0x33
    23d6:	9c a9       	ldd	r25, Y+52	; 0x34
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ea:	7e a9       	ldd	r23, Y+54	; 0x36
    23ec:	8f a9       	ldd	r24, Y+55	; 0x37
    23ee:	98 ad       	ldd	r25, Y+56	; 0x38
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	98 ab       	std	Y+48, r25	; 0x30
    240e:	8f a7       	std	Y+47, r24	; 0x2f
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <LCD_displayCharacter+0xe4>
    2412:	89 e1       	ldi	r24, 0x19	; 25
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e a7       	std	Y+46, r25	; 0x2e
    2418:	8d a7       	std	Y+45, r24	; 0x2d
    241a:	8d a5       	ldd	r24, Y+45	; 0x2d
    241c:	9e a5       	ldd	r25, Y+46	; 0x2e
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_displayCharacter+0xd2>
    2422:	9e a7       	std	Y+46, r25	; 0x2e
    2424:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8f a5       	ldd	r24, Y+47	; 0x2f
    2428:	98 a9       	ldd	r25, Y+48	; 0x30
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	98 ab       	std	Y+48, r25	; 0x30
    242e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <LCD_displayCharacter+0xc6>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	69 a9       	ldd	r22, Y+49	; 0x31
    243c:	7a a9       	ldd	r23, Y+50	; 0x32
    243e:	8b a9       	ldd	r24, Y+51	; 0x33
    2440:	9c a9       	ldd	r25, Y+52	; 0x34
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	98 ab       	std	Y+48, r25	; 0x30
    244c:	8f a7       	std	Y+47, r24	; 0x2f
    244e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2450:	98 a9       	ldd	r25, Y+48	; 0x30
    2452:	9c a7       	std	Y+44, r25	; 0x2c
    2454:	8b a7       	std	Y+43, r24	; 0x2b
    2456:	8b a5       	ldd	r24, Y+43	; 0x2b
    2458:	9c a5       	ldd	r25, Y+44	; 0x2c
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_displayCharacter+0x10e>
    245e:	9c a7       	std	Y+44, r25	; 0x2c
    2460:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2462:	a2 e3       	ldi	r26, 0x32	; 50
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e2 e3       	ldi	r30, 0x32	; 50
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	80 64       	ori	r24, 0x40	; 64
    246e:	8c 93       	st	X, r24
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e8       	ldi	r26, 0x80	; 128
    2476:	bf e3       	ldi	r27, 0x3F	; 63
    2478:	8f a3       	std	Y+39, r24	; 0x27
    247a:	98 a7       	std	Y+40, r25	; 0x28
    247c:	a9 a7       	std	Y+41, r26	; 0x29
    247e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	6f a1       	ldd	r22, Y+39	; 0x27
    2482:	78 a5       	ldd	r23, Y+40	; 0x28
    2484:	89 a5       	ldd	r24, Y+41	; 0x29
    2486:	9a a5       	ldd	r25, Y+42	; 0x2a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	53 e4       	ldi	r21, 0x43	; 67
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8b a3       	std	Y+35, r24	; 0x23
    249a:	9c a3       	std	Y+36, r25	; 0x24
    249c:	ad a3       	std	Y+37, r26	; 0x25
    249e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24a0:	6b a1       	ldd	r22, Y+35	; 0x23
    24a2:	7c a1       	ldd	r23, Y+36	; 0x24
    24a4:	8d a1       	ldd	r24, Y+37	; 0x25
    24a6:	9e a1       	ldd	r25, Y+38	; 0x26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <LCD_displayCharacter+0x176>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9a a3       	std	Y+34, r25	; 0x22
    24be:	89 a3       	std	Y+33, r24	; 0x21
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    24c2:	6b a1       	ldd	r22, Y+35	; 0x23
    24c4:	7c a1       	ldd	r23, Y+36	; 0x24
    24c6:	8d a1       	ldd	r24, Y+37	; 0x25
    24c8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	6f a1       	ldd	r22, Y+39	; 0x27
    24dc:	78 a5       	ldd	r23, Y+40	; 0x28
    24de:	89 a5       	ldd	r24, Y+41	; 0x29
    24e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9a a3       	std	Y+34, r25	; 0x22
    2500:	89 a3       	std	Y+33, r24	; 0x21
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <LCD_displayCharacter+0x1d6>
    2504:	89 e1       	ldi	r24, 0x19	; 25
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	98 a3       	std	Y+32, r25	; 0x20
    250a:	8f 8f       	std	Y+31, r24	; 0x1f
    250c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    250e:	98 a1       	ldd	r25, Y+32	; 0x20
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_displayCharacter+0x1c4>
    2514:	98 a3       	std	Y+32, r25	; 0x20
    2516:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	89 a1       	ldd	r24, Y+33	; 0x21
    2524:	9a a1       	ldd	r25, Y+34	; 0x22
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <LCD_displayCharacter+0x1b8>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6b a1       	ldd	r22, Y+35	; 0x23
    252e:	7c a1       	ldd	r23, Y+36	; 0x24
    2530:	8d a1       	ldd	r24, Y+37	; 0x25
    2532:	9e a1       	ldd	r25, Y+38	; 0x26
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9a a3       	std	Y+34, r25	; 0x22
    253e:	89 a3       	std	Y+33, r24	; 0x21
    2540:	89 a1       	ldd	r24, Y+33	; 0x21
    2542:	9a a1       	ldd	r25, Y+34	; 0x22
    2544:	9e 8f       	std	Y+30, r25	; 0x1e
    2546:	8d 8f       	std	Y+29, r24	; 0x1d
    2548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_displayCharacter+0x200>
    2550:	9e 8f       	std	Y+30, r25	; 0x1e
    2552:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    2554:	e8 e3       	ldi	r30, 0x38	; 56
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	89 ad       	ldd	r24, Y+57	; 0x39
    255a:	80 83       	st	Z, r24
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	a0 e8       	ldi	r26, 0x80	; 128
    2562:	bf e3       	ldi	r27, 0x3F	; 63
    2564:	89 8f       	std	Y+25, r24	; 0x19
    2566:	9a 8f       	std	Y+26, r25	; 0x1a
    2568:	ab 8f       	std	Y+27, r26	; 0x1b
    256a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	69 8d       	ldd	r22, Y+25	; 0x19
    256e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a e7       	ldi	r20, 0x7A	; 122
    257a:	53 e4       	ldi	r21, 0x43	; 67
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8d 8b       	std	Y+21, r24	; 0x15
    2586:	9e 8b       	std	Y+22, r25	; 0x16
    2588:	af 8b       	std	Y+23, r26	; 0x17
    258a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    258c:	6d 89       	ldd	r22, Y+21	; 0x15
    258e:	7e 89       	ldd	r23, Y+22	; 0x16
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <LCD_displayCharacter+0x262>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 8b       	std	Y+20, r25	; 0x14
    25aa:	8b 8b       	std	Y+19, r24	; 0x13
    25ac:	3f c0       	rjmp	.+126    	; 0x262c <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    25ae:	6d 89       	ldd	r22, Y+21	; 0x15
    25b0:	7e 89       	ldd	r23, Y+22	; 0x16
    25b2:	8f 89       	ldd	r24, Y+23	; 0x17
    25b4:	98 8d       	ldd	r25, Y+24	; 0x18
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	4c f5       	brge	.+82     	; 0x2618 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	69 8d       	ldd	r22, Y+25	; 0x19
    25c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <LCD_displayCharacter+0x2c2>
    25f0:	89 e1       	ldi	r24, 0x19	; 25
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9a 8b       	std	Y+18, r25	; 0x12
    25f6:	89 8b       	std	Y+17, r24	; 0x11
    25f8:	89 89       	ldd	r24, Y+17	; 0x11
    25fa:	9a 89       	ldd	r25, Y+18	; 0x12
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_displayCharacter+0x2b0>
    2600:	9a 8b       	std	Y+18, r25	; 0x12
    2602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8b 89       	ldd	r24, Y+19	; 0x13
    2606:	9c 89       	ldd	r25, Y+20	; 0x14
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <LCD_displayCharacter+0x2a4>
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	6d 89       	ldd	r22, Y+21	; 0x15
    261a:	7e 89       	ldd	r23, Y+22	; 0x16
    261c:	8f 89       	ldd	r24, Y+23	; 0x17
    261e:	98 8d       	ldd	r25, Y+24	; 0x18
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9c 8b       	std	Y+20, r25	; 0x14
    262a:	8b 8b       	std	Y+19, r24	; 0x13
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	98 8b       	std	Y+16, r25	; 0x10
    2632:	8f 87       	std	Y+15, r24	; 0x0f
    2634:	8f 85       	ldd	r24, Y+15	; 0x0f
    2636:	98 89       	ldd	r25, Y+16	; 0x10
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_displayCharacter+0x2ec>
    263c:	98 8b       	std	Y+16, r25	; 0x10
    263e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2640:	a2 e3       	ldi	r26, 0x32	; 50
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e2 e3       	ldi	r30, 0x32	; 50
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	8f 7b       	andi	r24, 0xBF	; 191
    264c:	8c 93       	st	X, r24
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e8       	ldi	r26, 0x80	; 128
    2654:	bf e3       	ldi	r27, 0x3F	; 63
    2656:	8b 87       	std	Y+11, r24	; 0x0b
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ad 87       	std	Y+13, r26	; 0x0d
    265c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2660:	7c 85       	ldd	r23, Y+12	; 0x0c
    2662:	8d 85       	ldd	r24, Y+13	; 0x0d
    2664:	9e 85       	ldd	r25, Y+14	; 0x0e
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	4a e7       	ldi	r20, 0x7A	; 122
    266c:	53 e4       	ldi	r21, 0x43	; 67
    266e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	8f 83       	std	Y+7, r24	; 0x07
    2678:	98 87       	std	Y+8, r25	; 0x08
    267a:	a9 87       	std	Y+9, r26	; 0x09
    267c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e 83       	std	Y+6, r25	; 0x06
    269c:	8d 83       	std	Y+5, r24	; 0x05
    269e:	3f c0       	rjmp	.+126    	; 0x271e <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	3f ef       	ldi	r19, 0xFF	; 255
    26ac:	4f e7       	ldi	r20, 0x7F	; 127
    26ae:	57 e4       	ldi	r21, 0x47	; 71
    26b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b4:	18 16       	cp	r1, r24
    26b6:	4c f5       	brge	.+82     	; 0x270a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    26bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26be:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e2       	ldi	r20, 0x20	; 32
    26c6:	51 e4       	ldi	r21, 0x41	; 65
    26c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	0f c0       	rjmp	.+30     	; 0x2700 <LCD_displayCharacter+0x3b4>
    26e2:	89 e1       	ldi	r24, 0x19	; 25
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 83       	std	Y+4, r25	; 0x04
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	9c 81       	ldd	r25, Y+4	; 0x04
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_displayCharacter+0x3a2>
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	8d 81       	ldd	r24, Y+5	; 0x05
    26f8:	9e 81       	ldd	r25, Y+6	; 0x06
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	69 f7       	brne	.-38     	; 0x26e2 <LCD_displayCharacter+0x396>
    2708:	14 c0       	rjmp	.+40     	; 0x2732 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270a:	6f 81       	ldd	r22, Y+7	; 0x07
    270c:	78 85       	ldd	r23, Y+8	; 0x08
    270e:	89 85       	ldd	r24, Y+9	; 0x09
    2710:	9a 85       	ldd	r25, Y+10	; 0x0a
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	9a 83       	std	Y+2, r25	; 0x02
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_displayCharacter+0x3de>
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2732:	e9 96       	adiw	r28, 0x39	; 57
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <LCD_displayString+0x6>
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	9b 83       	std	Y+3, r25	; 0x03
    2752:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2754:	19 82       	std	Y+1, r1	; 0x01
    2756:	0e c0       	rjmp	.+28     	; 0x2774 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	28 2f       	mov	r18, r24
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	fc 01       	movw	r30, r24
    2764:	e2 0f       	add	r30, r18
    2766:	f3 1f       	adc	r31, r19
    2768:	80 81       	ld	r24, Z
    276a:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_displayCharacter>
		i++;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	80 81       	ld	r24, Z
    2786:	88 23       	and	r24, r24
    2788:	39 f7       	brne	.-50     	; 0x2758 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <LCD_goToRowColumn+0x6>
    279c:	00 d0       	rcall	.+0      	; 0x279e <LCD_goToRowColumn+0x8>
    279e:	0f 92       	push	r0
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	8a 83       	std	Y+2, r24	; 0x02
    27a6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	3d 83       	std	Y+5, r19	; 0x05
    27b0:	2c 83       	std	Y+4, r18	; 0x04
    27b2:	8c 81       	ldd	r24, Y+4	; 0x04
    27b4:	9d 81       	ldd	r25, Y+5	; 0x05
    27b6:	81 30       	cpi	r24, 0x01	; 1
    27b8:	91 05       	cpc	r25, r1
    27ba:	c1 f0       	breq	.+48     	; 0x27ec <LCD_goToRowColumn+0x56>
    27bc:	2c 81       	ldd	r18, Y+4	; 0x04
    27be:	3d 81       	ldd	r19, Y+5	; 0x05
    27c0:	22 30       	cpi	r18, 0x02	; 2
    27c2:	31 05       	cpc	r19, r1
    27c4:	2c f4       	brge	.+10     	; 0x27d0 <LCD_goToRowColumn+0x3a>
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	61 f0       	breq	.+24     	; 0x27e6 <LCD_goToRowColumn+0x50>
    27ce:	19 c0       	rjmp	.+50     	; 0x2802 <LCD_goToRowColumn+0x6c>
    27d0:	2c 81       	ldd	r18, Y+4	; 0x04
    27d2:	3d 81       	ldd	r19, Y+5	; 0x05
    27d4:	22 30       	cpi	r18, 0x02	; 2
    27d6:	31 05       	cpc	r19, r1
    27d8:	69 f0       	breq	.+26     	; 0x27f4 <LCD_goToRowColumn+0x5e>
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	9d 81       	ldd	r25, Y+5	; 0x05
    27de:	83 30       	cpi	r24, 0x03	; 3
    27e0:	91 05       	cpc	r25, r1
    27e2:	61 f0       	breq	.+24     	; 0x27fc <LCD_goToRowColumn+0x66>
    27e4:	0e c0       	rjmp	.+28     	; 0x2802 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	0b c0       	rjmp	.+22     	; 0x2802 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	80 5c       	subi	r24, 0xC0	; 192
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	07 c0       	rjmp	.+14     	; 0x2802 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	80 5f       	subi	r24, 0xF0	; 240
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	03 c0       	rjmp	.+6      	; 0x2802 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	80 5b       	subi	r24, 0xB0	; 176
    2800:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	80 68       	ori	r24, 0x80	; 128
    2806:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_sendCommand>
}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	00 d0       	rcall	.+0      	; 0x2820 <LCD_displayStringRowColumn+0x6>
    2820:	00 d0       	rcall	.+0      	; 0x2822 <LCD_displayStringRowColumn+0x8>
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	6a 83       	std	Y+2, r22	; 0x02
    282a:	5c 83       	std	Y+4, r21	; 0x04
    282c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	6a 81       	ldd	r22, Y+2	; 0x02
    2832:	0e 94 cb 13 	call	0x2796	; 0x2796 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2836:	8b 81       	ldd	r24, Y+3	; 0x03
    2838:	9c 81       	ldd	r25, Y+4	; 0x04
    283a:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	62 97       	sbiw	r28, 0x12	; 18
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	9a 8b       	std	Y+18, r25	; 0x12
    2862:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2864:	89 89       	ldd	r24, Y+17	; 0x11
    2866:	9a 89       	ldd	r25, Y+18	; 0x12
    2868:	9e 01       	movw	r18, r28
    286a:	2f 5f       	subi	r18, 0xFF	; 255
    286c:	3f 4f       	sbci	r19, 0xFF	; 255
    286e:	b9 01       	movw	r22, r18
    2870:	4a e0       	ldi	r20, 0x0A	; 10
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <itoa>
   LCD_displayString(buff);
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	0e 94 a2 13 	call	0x2744	; 0x2744 <LCD_displayString>
}
    2880:	62 96       	adiw	r28, 0x12	; 18
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_sendCommand>
}
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <__vector_6>:


static volatile void (*g_Timer1_Call_Back_Ptr)(void);

ISR(TIMER1_COMPA_vect)
{
    28a6:	1f 92       	push	r1
    28a8:	0f 92       	push	r0
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	0f 92       	push	r0
    28ae:	11 24       	eor	r1, r1
    28b0:	2f 93       	push	r18
    28b2:	3f 93       	push	r19
    28b4:	4f 93       	push	r20
    28b6:	5f 93       	push	r21
    28b8:	6f 93       	push	r22
    28ba:	7f 93       	push	r23
    28bc:	8f 93       	push	r24
    28be:	9f 93       	push	r25
    28c0:	af 93       	push	r26
    28c2:	bf 93       	push	r27
    28c4:	ef 93       	push	r30
    28c6:	ff 93       	push	r31
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
	(*g_Timer1_Call_Back_Ptr)();
    28d0:	e0 91 4b 01 	lds	r30, 0x014B
    28d4:	f0 91 4c 01 	lds	r31, 0x014C
    28d8:	09 95       	icall
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	0f 90       	pop	r0
    28fc:	1f 90       	pop	r1
    28fe:	18 95       	reti

00002900 <timer1_init>:
 * which contains the configuration of timer1.
 *
 *******************************************************************************/

void timer1_init(const Timer1_ConfigType *timer1_config_ptr)
{
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <timer1_init+0x6>
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	9a 83       	std	Y+2, r25	; 0x02
    290c:	89 83       	std	Y+1, r24	; 0x01
	/* Select the Clock*/
	TCCR1B = (TCCR1B & 0xF8) | ((timer1_config_ptr -> T1_clk) & 0x07);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	98 2f       	mov	r25, r24
    291a:	98 7f       	andi	r25, 0xF8	; 248
    291c:	e9 81       	ldd	r30, Y+1	; 0x01
    291e:	fa 81       	ldd	r31, Y+2	; 0x02
    2920:	80 81       	ld	r24, Z
    2922:	87 70       	andi	r24, 0x07	; 7
    2924:	89 2b       	or	r24, r25
    2926:	8c 93       	st	X, r24


	TCNT1= timer1_config_ptr-> T1_startValue;
    2928:	ac e4       	ldi	r26, 0x4C	; 76
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	83 81       	ldd	r24, Z+3	; 0x03
    2932:	94 81       	ldd	r25, Z+4	; 0x04
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24

	if(timer1_config_ptr->T1_mode == TIMER1_OCB)
    293a:	e9 81       	ldd	r30, Y+1	; 0x01
    293c:	fa 81       	ldd	r31, Y+2	; 0x02
    293e:	82 81       	ldd	r24, Z+2	; 0x02
    2940:	82 30       	cpi	r24, 0x02	; 2
    2942:	a9 f5       	brne	.+106    	; 0x29ae <timer1_init+0xae>
	{
		SET_BIT(TCCR1B, WGM12);
    2944:	ae e4       	ldi	r26, 0x4E	; 78
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	ee e4       	ldi	r30, 0x4E	; 78
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	88 60       	ori	r24, 0x08	; 8
    2950:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1B);
    2952:	a9 e5       	ldi	r26, 0x59	; 89
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e9 e5       	ldi	r30, 0x59	; 89
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	88 60       	ori	r24, 0x08	; 8
    295e:	8c 93       	st	X, r24
		TCCR1A = (TCCR1A & 0x0F) | (((timer1_config_ptr -> T1_cmp_mode) & 0xF0) << 4);
    2960:	af e4       	ldi	r26, 0x4F	; 79
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	ef e4       	ldi	r30, 0x4F	; 79
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	28 2f       	mov	r18, r24
    296c:	2f 70       	andi	r18, 0x0F	; 15
    296e:	e9 81       	ldd	r30, Y+1	; 0x01
    2970:	fa 81       	ldd	r31, Y+2	; 0x02
    2972:	81 81       	ldd	r24, Z+1	; 0x01
    2974:	88 2f       	mov	r24, r24
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	80 7f       	andi	r24, 0xF0	; 240
    297a:	90 70       	andi	r25, 0x00	; 0
    297c:	82 95       	swap	r24
    297e:	92 95       	swap	r25
    2980:	90 7f       	andi	r25, 0xF0	; 240
    2982:	98 27       	eor	r25, r24
    2984:	80 7f       	andi	r24, 0xF0	; 240
    2986:	98 27       	eor	r25, r24
    2988:	82 2b       	or	r24, r18
    298a:	8c 93       	st	X, r24
		OCR1B= timer1_config_ptr-> T1_compareValue;
    298c:	a8 e4       	ldi	r26, 0x48	; 72
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	85 81       	ldd	r24, Z+5	; 0x05
    2996:	96 81       	ldd	r25, Z+6	; 0x06
    2998:	11 96       	adiw	r26, 0x01	; 1
    299a:	9c 93       	st	X, r25
    299c:	8e 93       	st	-X, r24
		SET_BIT(TCCR1A, FOC1B);
    299e:	af e4       	ldi	r26, 0x4F	; 79
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	ef e4       	ldi	r30, 0x4F	; 79
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	84 60       	ori	r24, 0x04	; 4
    29aa:	8c 93       	st	X, r24
    29ac:	55 c0       	rjmp	.+170    	; 0x2a58 <timer1_init+0x158>
	}
	else if ((timer1_config_ptr->T1_mode) == TIMER1_OCA)
    29ae:	e9 81       	ldd	r30, Y+1	; 0x01
    29b0:	fa 81       	ldd	r31, Y+2	; 0x02
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	83 30       	cpi	r24, 0x03	; 3
    29b6:	b1 f5       	brne	.+108    	; 0x2a24 <timer1_init+0x124>
	{
		SET_BIT(TCCR1B, WGM12);
    29b8:	ae e4       	ldi	r26, 0x4E	; 78
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	ee e4       	ldi	r30, 0x4E	; 78
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	88 60       	ori	r24, 0x08	; 8
    29c4:	8c 93       	st	X, r24
		SET_BIT(TIMSK, OCIE1A);
    29c6:	a9 e5       	ldi	r26, 0x59	; 89
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e9 e5       	ldi	r30, 0x59	; 89
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	80 61       	ori	r24, 0x10	; 16
    29d2:	8c 93       	st	X, r24
		TCCR1A = (TCCR1A & 0x0F) | ((timer1_config_ptr -> T1_cmp_mode) << 6);
    29d4:	af e4       	ldi	r26, 0x4F	; 79
    29d6:	b0 e0       	ldi	r27, 0x00	; 0
    29d8:	ef e4       	ldi	r30, 0x4F	; 79
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 81       	ld	r24, Z
    29de:	28 2f       	mov	r18, r24
    29e0:	2f 70       	andi	r18, 0x0F	; 15
    29e2:	e9 81       	ldd	r30, Y+1	; 0x01
    29e4:	fa 81       	ldd	r31, Y+2	; 0x02
    29e6:	81 81       	ldd	r24, Z+1	; 0x01
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	00 24       	eor	r0, r0
    29ee:	96 95       	lsr	r25
    29f0:	87 95       	ror	r24
    29f2:	07 94       	ror	r0
    29f4:	96 95       	lsr	r25
    29f6:	87 95       	ror	r24
    29f8:	07 94       	ror	r0
    29fa:	98 2f       	mov	r25, r24
    29fc:	80 2d       	mov	r24, r0
    29fe:	82 2b       	or	r24, r18
    2a00:	8c 93       	st	X, r24
		OCR1A= timer1_config_ptr-> T1_compareValue;
    2a02:	aa e4       	ldi	r26, 0x4A	; 74
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e9 81       	ldd	r30, Y+1	; 0x01
    2a08:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0a:	85 81       	ldd	r24, Z+5	; 0x05
    2a0c:	96 81       	ldd	r25, Z+6	; 0x06
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	9c 93       	st	X, r25
    2a12:	8e 93       	st	-X, r24
		SET_BIT(TCCR1A,FOC1A);
    2a14:	af e4       	ldi	r26, 0x4F	; 79
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ef e4       	ldi	r30, 0x4F	; 79
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	88 60       	ori	r24, 0x08	; 8
    2a20:	8c 93       	st	X, r24
    2a22:	1a c0       	rjmp	.+52     	; 0x2a58 <timer1_init+0x158>
	}
	else if ((timer1_config_ptr->T1_mode) == TIMER1_OVF)
    2a24:	e9 81       	ldd	r30, Y+1	; 0x01
    2a26:	fa 81       	ldd	r31, Y+2	; 0x02
    2a28:	82 81       	ldd	r24, Z+2	; 0x02
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	a9 f4       	brne	.+42     	; 0x2a58 <timer1_init+0x158>
	{
		SET_BIT(TCCR1A,FOC1A);
    2a2e:	af e4       	ldi	r26, 0x4F	; 79
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ef e4       	ldi	r30, 0x4F	; 79
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	88 60       	ori	r24, 0x08	; 8
    2a3a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    2a3c:	af e4       	ldi	r26, 0x4F	; 79
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ef e4       	ldi	r30, 0x4F	; 79
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	84 60       	ori	r24, 0x04	; 4
    2a48:	8c 93       	st	X, r24
		SET_BIT(TIMSK, TOIE1);
    2a4a:	a9 e5       	ldi	r26, 0x59	; 89
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e9 e5       	ldi	r30, 0x59	; 89
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	84 60       	ori	r24, 0x04	; 4
    2a56:	8c 93       	st	X, r24
	}

}
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <timerONSeconds>:
 *
 * seconds: the number of seconds the timer will tick before triggering an interrupt
 *
 *******************************************************************************/
void timerONSeconds(uint8 seconds)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	28 97       	sbiw	r28, 0x08	; 8
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	de bf       	out	0x3e, r29	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	cd bf       	out	0x3d, r28	; 61
    2a76:	88 87       	std	Y+8, r24	; 0x08
	Timer1_ConfigType timer1_config = {F_CPU1024, COM1_NORMAL_MODE, TIMER1_OCA,0, 7812*seconds};
    2a78:	88 85       	ldd	r24, Y+8	; 0x08
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	84 e8       	ldi	r24, 0x84	; 132
    2a80:	9e e1       	ldi	r25, 0x1E	; 30
    2a82:	ac 01       	movw	r20, r24
    2a84:	24 9f       	mul	r18, r20
    2a86:	c0 01       	movw	r24, r0
    2a88:	25 9f       	mul	r18, r21
    2a8a:	90 0d       	add	r25, r0
    2a8c:	34 9f       	mul	r19, r20
    2a8e:	90 0d       	add	r25, r0
    2a90:	11 24       	eor	r1, r1
    2a92:	9c 01       	movw	r18, r24
    2a94:	85 e0       	ldi	r24, 0x05	; 5
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	1a 82       	std	Y+2, r1	; 0x02
    2a9a:	83 e0       	ldi	r24, 0x03	; 3
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
    2a9e:	1d 82       	std	Y+5, r1	; 0x05
    2aa0:	1c 82       	std	Y+4, r1	; 0x04
    2aa2:	3f 83       	std	Y+7, r19	; 0x07
    2aa4:	2e 83       	std	Y+6, r18	; 0x06
	timer1_init(&timer1_config);
    2aa6:	ce 01       	movw	r24, r28
    2aa8:	01 96       	adiw	r24, 0x01	; 1
    2aaa:	0e 94 80 14 	call	0x2900	; 0x2900 <timer1_init>
}
    2aae:	28 96       	adiw	r28, 0x08	; 8
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
    2aba:	cf 91       	pop	r28
    2abc:	df 91       	pop	r29
    2abe:	08 95       	ret

00002ac0 <Timer1_setCallBack>:
 *
 * void(*Ptr2Func)(void): a pointer to the function to be called after interrupt.
 *
 *******************************************************************************/
void Timer1_setCallBack(void(*Ptr2Func)(void))
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <Timer1_setCallBack+0x6>
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1_Call_Back_Ptr = Ptr2Func;
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	90 93 4c 01 	sts	0x014C, r25
    2ad6:	80 93 4b 01 	sts	0x014B, r24
}
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <Timer1_Stop>:
 * from counting
 *
 *
 *******************************************************************************/
void Timer1_Stop(void)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	2c 97       	sbiw	r28, 0x0c	; 12
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType timer1_config = {NO_CLOCK, COM1_NORMAL_MODE, TIMER1_OCA,0, 0};
    2af8:	ce 01       	movw	r24, r28
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	99 87       	std	Y+9, r25	; 0x09
    2afe:	88 87       	std	Y+8, r24	; 0x08
    2b00:	e0 e4       	ldi	r30, 0x40	; 64
    2b02:	f1 e0       	ldi	r31, 0x01	; 1
    2b04:	fb 87       	std	Y+11, r31	; 0x0b
    2b06:	ea 87       	std	Y+10, r30	; 0x0a
    2b08:	f7 e0       	ldi	r31, 0x07	; 7
    2b0a:	fc 87       	std	Y+12, r31	; 0x0c
    2b0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b0e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b10:	00 80       	ld	r0, Z
    2b12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	9b 87       	std	Y+11, r25	; 0x0b
    2b1a:	8a 87       	std	Y+10, r24	; 0x0a
    2b1c:	e8 85       	ldd	r30, Y+8	; 0x08
    2b1e:	f9 85       	ldd	r31, Y+9	; 0x09
    2b20:	00 82       	st	Z, r0
    2b22:	88 85       	ldd	r24, Y+8	; 0x08
    2b24:	99 85       	ldd	r25, Y+9	; 0x09
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	99 87       	std	Y+9, r25	; 0x09
    2b2a:	88 87       	std	Y+8, r24	; 0x08
    2b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b2e:	91 50       	subi	r25, 0x01	; 1
    2b30:	9c 87       	std	Y+12, r25	; 0x0c
    2b32:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b34:	ee 23       	and	r30, r30
    2b36:	51 f7       	brne	.-44     	; 0x2b0c <Timer1_Stop+0x28>
	timer1_init(&timer1_config);
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	0e 94 80 14 	call	0x2900	; 0x2900 <timer1_init>
}
    2b40:	2c 96       	adiw	r28, 0x0c	; 12
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	08 95       	ret

00002b52 <UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/


void UART_init(const UART_ConfigType * UConfigPtr)
{
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	27 97       	sbiw	r28, 0x07	; 7
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	9f 83       	std	Y+7, r25	; 0x07
    2b68:	8e 83       	std	Y+6, r24	; 0x06
	uint32 BaudRate;
	uint8 BaudPreScaler;
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2b6a:	eb e2       	ldi	r30, 0x2B	; 43
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2b72:	ea e2       	ldi	r30, 0x2A	; 42
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	88 e1       	ldi	r24, 0x18	; 24
    2b78:	80 83       	st	Z, r24

	if (UConfigPtr->UCharacterSize == 7)
    2b7a:	ee 81       	ldd	r30, Y+6	; 0x06
    2b7c:	ff 81       	ldd	r31, Y+7	; 0x07
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	87 30       	cpi	r24, 0x07	; 7
    2b82:	51 f4       	brne	.+20     	; 0x2b98 <UART_init+0x46>
	{
		UCSRB |= (1<<UCSZ2);
    2b84:	aa e2       	ldi	r26, 0x2A	; 42
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	ea e2       	ldi	r30, 0x2A	; 42
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	84 60       	ori	r24, 0x04	; 4
    2b90:	8c 93       	st	X, r24
		flag_bit9 = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	80 93 4d 01 	sts	0x014D, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL);
    2b98:	a0 e4       	ldi	r26, 0x40	; 64
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e0 e4       	ldi	r30, 0x40	; 64
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	80 68       	ori	r24, 0x80	; 128
    2ba4:	8c 93       	st	X, r24
	UCSRC |= ( UConfigPtr->UParityMode << UPM0 );
    2ba6:	a0 e4       	ldi	r26, 0x40	; 64
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e0 e4       	ldi	r30, 0x40	; 64
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	ee 81       	ldd	r30, Y+6	; 0x06
    2bb4:	ff 81       	ldd	r31, Y+7	; 0x07
    2bb6:	80 81       	ld	r24, Z
    2bb8:	88 2f       	mov	r24, r24
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	82 95       	swap	r24
    2bbe:	92 95       	swap	r25
    2bc0:	90 7f       	andi	r25, 0xF0	; 240
    2bc2:	98 27       	eor	r25, r24
    2bc4:	80 7f       	andi	r24, 0xF0	; 240
    2bc6:	98 27       	eor	r25, r24
    2bc8:	82 2b       	or	r24, r18
    2bca:	8c 93       	st	X, r24
	UCSRC |= ( UConfigPtr->UStopBit <<USBS);
    2bcc:	a0 e4       	ldi	r26, 0x40	; 64
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e0 e4       	ldi	r30, 0x40	; 64
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	ee 81       	ldd	r30, Y+6	; 0x06
    2bda:	ff 81       	ldd	r31, Y+7	; 0x07
    2bdc:	81 81       	ldd	r24, Z+1	; 0x01
    2bde:	88 2f       	mov	r24, r24
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	82 2b       	or	r24, r18
    2bf0:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	BaudRate = UConfigPtr->UBaudRate;
    2bf2:	ee 81       	ldd	r30, Y+6	; 0x06
    2bf4:	ff 81       	ldd	r31, Y+7	; 0x07
    2bf6:	83 81       	ldd	r24, Z+3	; 0x03
    2bf8:	94 81       	ldd	r25, Z+4	; 0x04
    2bfa:	a5 81       	ldd	r26, Z+5	; 0x05
    2bfc:	b6 81       	ldd	r27, Z+6	; 0x06
    2bfe:	8a 83       	std	Y+2, r24	; 0x02
    2c00:	9b 83       	std	Y+3, r25	; 0x03
    2c02:	ac 83       	std	Y+4, r26	; 0x04
    2c04:	bd 83       	std	Y+5, r27	; 0x05
	BaudPreScaler = ((F_CPU / (BaudRate * 8UL)) - 1);
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0a:	ac 81       	ldd	r26, Y+4	; 0x04
    2c0c:	bd 81       	ldd	r27, Y+5	; 0x05
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	aa 1f       	adc	r26, r26
    2c14:	bb 1f       	adc	r27, r27
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	aa 1f       	adc	r26, r26
    2c1c:	bb 1f       	adc	r27, r27
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	aa 1f       	adc	r26, r26
    2c24:	bb 1f       	adc	r27, r27
    2c26:	9c 01       	movw	r18, r24
    2c28:	ad 01       	movw	r20, r26
    2c2a:	80 e4       	ldi	r24, 0x40	; 64
    2c2c:	92 e4       	ldi	r25, 0x42	; 66
    2c2e:	af e0       	ldi	r26, 0x0F	; 15
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__udivmodsi4>
    2c3a:	da 01       	movw	r26, r20
    2c3c:	c9 01       	movw	r24, r18
    2c3e:	81 50       	subi	r24, 0x01	; 1
    2c40:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = BaudPreScaler>>8;
    2c42:	e0 e4       	ldi	r30, 0x40	; 64
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	89 2f       	mov	r24, r25
    2c4e:	99 0f       	add	r25, r25
    2c50:	99 0b       	sbc	r25, r25
    2c52:	80 83       	st	Z, r24
	UBRRL = BaudPreScaler;
    2c54:	e9 e2       	ldi	r30, 0x29	; 41
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	80 83       	st	Z, r24
}
    2c5c:	27 96       	adiw	r28, 0x07	; 7
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <UART_sendByte>:

void UART_sendByte(const uint16 data)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <UART_sendByte+0x6>
    2c74:	0f 92       	push	r0
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	9b 83       	std	Y+3, r25	; 0x03
    2c7c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 bit9;
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c7e:	eb e2       	ldi	r30, 0x2B	; 43
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	80 72       	andi	r24, 0x20	; 32
    2c8a:	90 70       	andi	r25, 0x00	; 0
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	b9 f3       	breq	.-18     	; 0x2c7e <UART_sendByte+0x10>

	if (flag_bit9==1)
    2c90:	80 91 4d 01 	lds	r24, 0x014D
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	59 f4       	brne	.+22     	; 0x2cae <UART_sendByte+0x40>
	{
		bit9 = data & (1<<8);
    2c98:	19 82       	std	Y+1, r1	; 0x01
		UCSRB = (UCSRB & 0xFE) | bit9;
    2c9a:	aa e2       	ldi	r26, 0x2A	; 42
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	ea e2       	ldi	r30, 0x2A	; 42
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	98 2f       	mov	r25, r24
    2ca6:	9e 7f       	andi	r25, 0xFE	; 254
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	89 2b       	or	r24, r25
    2cac:	8c 93       	st	X, r24
	}
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2cae:	ec e2       	ldi	r30, 0x2C	; 44
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <UART_receiveByte>:

uint16 UART_receiveByte(void)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	0f 92       	push	r0
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
	uint8 bit9;
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ccc:	eb e2       	ldi	r30, 0x2B	; 43
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 23       	and	r24, r24
    2cd4:	dc f7       	brge	.-10     	; 0x2ccc <UART_receiveByte+0xa>

	bit9 = UCSRB & 0x01;
    2cd6:	ea e2       	ldi	r30, 0x2A	; 42
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	81 70       	andi	r24, 0x01	; 1
    2cde:	89 83       	std	Y+1, r24	; 0x01

	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return (UDR | (bit9<<8));
    2ce0:	ec e2       	ldi	r30, 0x2C	; 44
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	88 2f       	mov	r24, r24
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	98 2f       	mov	r25, r24
    2cf2:	88 27       	eor	r24, r24
    2cf4:	82 2b       	or	r24, r18
    2cf6:	93 2b       	or	r25, r19
}
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <UART_sendString+0x6>
    2d06:	0f 92       	push	r0
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	9b 83       	std	Y+3, r25	; 0x03
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d10:	19 82       	std	Y+1, r1	; 0x01
    2d12:	10 c0       	rjmp	.+32     	; 0x2d34 <UART_sendString+0x34>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e2 0f       	add	r30, r18
    2d22:	f3 1f       	adc	r31, r19
    2d24:	80 81       	ld	r24, Z
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <UART_sendByte>
		i++;
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3e:	fc 01       	movw	r30, r24
    2d40:	e2 0f       	add	r30, r18
    2d42:	f3 1f       	adc	r31, r19
    2d44:	80 81       	ld	r24, Z
    2d46:	88 23       	and	r24, r24
    2d48:	29 f7       	brne	.-54     	; 0x2d14 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <UART_receiveString+0xa>
    2d60:	0f 92       	push	r0
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	9b 83       	std	Y+3, r25	; 0x03
    2d68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d6a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	8a 81       	ldd	r24, Y+2	; 0x02
    2d74:	9b 81       	ldd	r25, Y+3	; 0x03
    2d76:	8c 01       	movw	r16, r24
    2d78:	02 0f       	add	r16, r18
    2d7a:	13 1f       	adc	r17, r19
    2d7c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
    2d80:	f8 01       	movw	r30, r16
    2d82:	80 83       	st	Z, r24
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	8c 01       	movw	r16, r24
    2d98:	02 0f       	add	r16, r18
    2d9a:	13 1f       	adc	r17, r19
    2d9c:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <UART_receiveByte>
    2da0:	f8 01       	movw	r30, r16
    2da2:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	28 2f       	mov	r18, r24
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	9b 81       	ldd	r25, Y+3	; 0x03
    2dae:	fc 01       	movw	r30, r24
    2db0:	e2 0f       	add	r30, r18
    2db2:	f3 1f       	adc	r31, r19
    2db4:	80 81       	ld	r24, Z
    2db6:	83 32       	cpi	r24, 0x23	; 35
    2db8:	31 f7       	brne	.-52     	; 0x2d86 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	e2 0f       	add	r30, r18
    2dc8:	f3 1f       	adc	r31, r19
    2dca:	10 82       	st	Z, r1
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	1f 91       	pop	r17
    2dd8:	0f 91       	pop	r16
    2dda:	08 95       	ret

00002ddc <__udivmodsi4>:
    2ddc:	a1 e2       	ldi	r26, 0x21	; 33
    2dde:	1a 2e       	mov	r1, r26
    2de0:	aa 1b       	sub	r26, r26
    2de2:	bb 1b       	sub	r27, r27
    2de4:	fd 01       	movw	r30, r26
    2de6:	0d c0       	rjmp	.+26     	; 0x2e02 <__udivmodsi4_ep>

00002de8 <__udivmodsi4_loop>:
    2de8:	aa 1f       	adc	r26, r26
    2dea:	bb 1f       	adc	r27, r27
    2dec:	ee 1f       	adc	r30, r30
    2dee:	ff 1f       	adc	r31, r31
    2df0:	a2 17       	cp	r26, r18
    2df2:	b3 07       	cpc	r27, r19
    2df4:	e4 07       	cpc	r30, r20
    2df6:	f5 07       	cpc	r31, r21
    2df8:	20 f0       	brcs	.+8      	; 0x2e02 <__udivmodsi4_ep>
    2dfa:	a2 1b       	sub	r26, r18
    2dfc:	b3 0b       	sbc	r27, r19
    2dfe:	e4 0b       	sbc	r30, r20
    2e00:	f5 0b       	sbc	r31, r21

00002e02 <__udivmodsi4_ep>:
    2e02:	66 1f       	adc	r22, r22
    2e04:	77 1f       	adc	r23, r23
    2e06:	88 1f       	adc	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	1a 94       	dec	r1
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <__udivmodsi4_loop>
    2e0e:	60 95       	com	r22
    2e10:	70 95       	com	r23
    2e12:	80 95       	com	r24
    2e14:	90 95       	com	r25
    2e16:	9b 01       	movw	r18, r22
    2e18:	ac 01       	movw	r20, r24
    2e1a:	bd 01       	movw	r22, r26
    2e1c:	cf 01       	movw	r24, r30
    2e1e:	08 95       	ret

00002e20 <__prologue_saves__>:
    2e20:	2f 92       	push	r2
    2e22:	3f 92       	push	r3
    2e24:	4f 92       	push	r4
    2e26:	5f 92       	push	r5
    2e28:	6f 92       	push	r6
    2e2a:	7f 92       	push	r7
    2e2c:	8f 92       	push	r8
    2e2e:	9f 92       	push	r9
    2e30:	af 92       	push	r10
    2e32:	bf 92       	push	r11
    2e34:	cf 92       	push	r12
    2e36:	df 92       	push	r13
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	ca 1b       	sub	r28, r26
    2e4a:	db 0b       	sbc	r29, r27
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	09 94       	ijmp

00002e58 <__epilogue_restores__>:
    2e58:	2a 88       	ldd	r2, Y+18	; 0x12
    2e5a:	39 88       	ldd	r3, Y+17	; 0x11
    2e5c:	48 88       	ldd	r4, Y+16	; 0x10
    2e5e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e60:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e62:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e64:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e66:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e68:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e6a:	b9 84       	ldd	r11, Y+9	; 0x09
    2e6c:	c8 84       	ldd	r12, Y+8	; 0x08
    2e6e:	df 80       	ldd	r13, Y+7	; 0x07
    2e70:	ee 80       	ldd	r14, Y+6	; 0x06
    2e72:	fd 80       	ldd	r15, Y+5	; 0x05
    2e74:	0c 81       	ldd	r16, Y+4	; 0x04
    2e76:	1b 81       	ldd	r17, Y+3	; 0x03
    2e78:	aa 81       	ldd	r26, Y+2	; 0x02
    2e7a:	b9 81       	ldd	r27, Y+1	; 0x01
    2e7c:	ce 0f       	add	r28, r30
    2e7e:	d1 1d       	adc	r29, r1
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	ed 01       	movw	r28, r26
    2e8c:	08 95       	ret

00002e8e <itoa>:
    2e8e:	fb 01       	movw	r30, r22
    2e90:	9f 01       	movw	r18, r30
    2e92:	e8 94       	clt
    2e94:	42 30       	cpi	r20, 0x02	; 2
    2e96:	c4 f0       	brlt	.+48     	; 0x2ec8 <itoa+0x3a>
    2e98:	45 32       	cpi	r20, 0x25	; 37
    2e9a:	b4 f4       	brge	.+44     	; 0x2ec8 <itoa+0x3a>
    2e9c:	4a 30       	cpi	r20, 0x0A	; 10
    2e9e:	29 f4       	brne	.+10     	; 0x2eaa <itoa+0x1c>
    2ea0:	97 fb       	bst	r25, 7
    2ea2:	1e f4       	brtc	.+6      	; 0x2eaa <itoa+0x1c>
    2ea4:	90 95       	com	r25
    2ea6:	81 95       	neg	r24
    2ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    2eaa:	64 2f       	mov	r22, r20
    2eac:	77 27       	eor	r23, r23
    2eae:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__udivmodhi4>
    2eb2:	80 5d       	subi	r24, 0xD0	; 208
    2eb4:	8a 33       	cpi	r24, 0x3A	; 58
    2eb6:	0c f0       	brlt	.+2      	; 0x2eba <itoa+0x2c>
    2eb8:	89 5d       	subi	r24, 0xD9	; 217
    2eba:	81 93       	st	Z+, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	a1 f7       	brne	.-24     	; 0x2eaa <itoa+0x1c>
    2ec2:	16 f4       	brtc	.+4      	; 0x2ec8 <itoa+0x3a>
    2ec4:	5d e2       	ldi	r21, 0x2D	; 45
    2ec6:	51 93       	st	Z+, r21
    2ec8:	10 82       	st	Z, r1
    2eca:	c9 01       	movw	r24, r18
    2ecc:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <strrev>

00002ed0 <strrev>:
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	67 2f       	mov	r22, r23
    2ed6:	71 91       	ld	r23, Z+
    2ed8:	77 23       	and	r23, r23
    2eda:	e1 f7       	brne	.-8      	; 0x2ed4 <strrev+0x4>
    2edc:	32 97       	sbiw	r30, 0x02	; 2
    2ede:	04 c0       	rjmp	.+8      	; 0x2ee8 <strrev+0x18>
    2ee0:	7c 91       	ld	r23, X
    2ee2:	6d 93       	st	X+, r22
    2ee4:	70 83       	st	Z, r23
    2ee6:	62 91       	ld	r22, -Z
    2ee8:	ae 17       	cp	r26, r30
    2eea:	bf 07       	cpc	r27, r31
    2eec:	c8 f3       	brcs	.-14     	; 0x2ee0 <strrev+0x10>
    2eee:	08 95       	ret

00002ef0 <__udivmodhi4>:
    2ef0:	aa 1b       	sub	r26, r26
    2ef2:	bb 1b       	sub	r27, r27
    2ef4:	51 e1       	ldi	r21, 0x11	; 17
    2ef6:	07 c0       	rjmp	.+14     	; 0x2f06 <__udivmodhi4_ep>

00002ef8 <__udivmodhi4_loop>:
    2ef8:	aa 1f       	adc	r26, r26
    2efa:	bb 1f       	adc	r27, r27
    2efc:	a6 17       	cp	r26, r22
    2efe:	b7 07       	cpc	r27, r23
    2f00:	10 f0       	brcs	.+4      	; 0x2f06 <__udivmodhi4_ep>
    2f02:	a6 1b       	sub	r26, r22
    2f04:	b7 0b       	sbc	r27, r23

00002f06 <__udivmodhi4_ep>:
    2f06:	88 1f       	adc	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	5a 95       	dec	r21
    2f0c:	a9 f7       	brne	.-22     	; 0x2ef8 <__udivmodhi4_loop>
    2f0e:	80 95       	com	r24
    2f10:	90 95       	com	r25
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	08 95       	ret

00002f18 <_exit>:
    2f18:	f8 94       	cli

00002f1a <__stop_program>:
    2f1a:	ff cf       	rjmp	.-2      	; 0x2f1a <__stop_program>
